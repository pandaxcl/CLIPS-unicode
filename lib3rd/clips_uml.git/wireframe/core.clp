;;; vim: expandtab autoindent
;;; map <buffer> \\ :update<CR>:1tabnext<CR>:2wincmd w<CR>:silent normal \\<CR>:2tabnext<CR>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; React
(defclass #Component (is-a USER)
    (slot wireframe (type INSTANCE)(allowed-classes WireFrame))
    (slot owner     (type INSTANCE)(allowed-classes Container))
    (slot dock      (type INSTANCE)(allowed-classes Component))
    (slot uuid      (type LEXEME)(default-dynamic (gensym*))(access read-only))
)
(defclass  Component (is-a #Component)
    (     slot named        (type LEXEME)(default-dynamic (gensym*)))
    (multislot properties   (type LEXEME))
    (multislot parameters   (type LEXEME))
)
(defclass Container (is-a Component)
    (multislot children (type INSTANCE)(allowed-classes Component Hook))
)
(defclass Hook (is-a USER)
    (slot uuid (type LEXEME)(default-dynamic (gensym*))(access read-only))
)
(defclass Context (is-a Container)
    (slot value (type LEXEME))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defclass @Script (is-a Annotation)
    (     slot named    (type LEXEME))
    (multislot script   (type LEXEME))
    (     slot language (type LEXEME)(allowed-symbols CLIPS JavaScript Java C++ C)(default CLIPS))
)
(defclass @Eval    (is-a @Script))
(defclass @OnEvent (is-a @Script))
(defclass @OnClick (is-a @OnEvent)
    (slot named  (default OnClick)(source composite))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defclass @Grid (is-a Annotation)
    (slot row       (type INTEGER))
    (slot column    (type INTEGER))
    (slot span      (type INTEGER)(default 1))
)
(defclass @ToMany (is-a Annotation)
    (     slot one     (type INSTANCE)(allowed-classes Component))
    (multislot many    (type INSTANCE)(allowed-classes Component))
    (     slot default (type INSTANCE)(allowed-classes Component))
)
(defclass @Connection (is-a @Script)
    (slot source (type INSTANCE)(allowed-classes Component))
    (slot target (type INSTANCE)(allowed-classes Component))
)
(defclass @Link (is-a @Connection)
    (slot to (type LEXEME))
    (slot by (type SYMBOL)(allowed-symbols window dialog popover)(default window))
)
(defclass @Reference (is-a @Connection)
    (slot reference  (type LEXEME))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defclass Layout    (is-a Container))
(defclass Header    (is-a Container))
(defclass Footer    (is-a Container))
(defclass Sider     (is-a Container))
(defclass Content   (is-a Container))

(defclass  List      (is-a Container)
    (slot direction (type SYMBOL)(allowed-symbols horizontal vertical)(default vertical))
    (slot repeat    (type INTEGER)(default 0))
)
(defclass HList (is-a List)
    (slot direction (default horizontal)(source composite))
)
(defclass VList (is-a List)
    (slot direction (default vertical)(source composite))
)

(defclass #Form (is-a USER)
    (multislot left  (type INSTANCE)(allowed-classes Component))
    (multislot right (type INSTANCE)(allowed-classes Component))
)
(defclass  Form (is-a Container #Form))
(defclass  Grid (is-a Container)
    (slot rows      (type INTEGER)(default  6))
    (slot columns   (type INTEGER)(default 24))
    (slot gutter    (type INTEGER))
)

(defclass Embed   (is-a Component)
    (slot default (type LEXEME))
)

(defclass Image (is-a Component)
    (slot text    (type LEXEME ))
    (slot rows    (type INTEGER)(default 1))
    (slot columns (type INTEGER)(default 1))
)

(defclass Button    (is-a Component)
    (slot title (type LEXEME)(default "[unknown-button]"))
)
(defclass Check     (is-a Button)
    (slot checked (type SYMBOL)(allowed-values TRUE FALSE)(default FALSE))
)
(defclass Radio     (is-a Button)
    (slot selected (type SYMBOL)(allowed-values TRUE FALSE)(default FALSE))
    (slot group    (type LEXEME))
)

(defclass Switch    (is-a Button)
    (slot status (type SYMBOL)(allowed-symbols ON OFF)(default OFF))
)
(defclass Slider    (is-a Component))
(defclass Progress  (is-a Component))

(defclass Text      (is-a Component)
    (slot text (type LEXEME NUMBER)(default "{unknown-text}"))
)
(defclass Label     (is-a Text))
(defclass TextField (is-a Text))
(defclass TextArea  (is-a Text))

(defclass Breadcrumb (is-a Container))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defclass #WireFrame (is-a USER)
    (multislot hook  (type INSTANCE)(allowed-classes      Hook))
    (multislot local (type INSTANCE)(allowed-classes Component))
    (     slot main  (type INSTANCE)(allowed-classes Component))
)
(defclass  WireFrame (is-a Container #WireFrame))
(defmessage-handler WireFrame local-or-wireframe-with-name (?name)
    (progn$ (?v (send ?self get-local)) (if (eq ?name (send ?v get-named)) then
        (return ?v)
    ))
    (do-for-all-instances ((?v WireFrame)) (eq ?name (send ?v get-named))
        (return ?v)
    )
    (return [nil])
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Hooks
(defclass useScript   (is-a Hook)
    (slot global  (type SYMBOL)(default FALSE)(allowed-symbols TRUE FALSE))
)
(defclass useProperty (is-a Hook);;; XML的属性
    (slot named   (type LEXEME))
    (slot type    (type LEXEME))
    (slot default (type LEXEME))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Hooks
(defclass useState  (is-a Hook)
    (slot getter    (type LEXEME))
    (slot setter    (type LEXEME))
    (slot default   (type LEXEME NUMBER))
)
(defclass useEffect (is-a Hook)
    (multislot effect (type LEXEME))
    (multislot clear  (type LEXEME))
)
(defclass useContext(is-a Hook)
    (slot context (type LEXEME))
)
(defclass useReducer(is-a Hook)
    (slot reducer (type LEXEME))
    (slot state   (type LEXEME NUMBER))
    (slot prepare (type LEXEME))
)
(defclass useCallback (is-a Hook)
    (multislot script (type LEXEME))
    (multislot depend (type LEXEME))
)
(defclass useMemo (is-a Hook)
    (     slot named  (type LEXEME))
    (multislot script (type LEXEME))
    (multislot depend (type LEXEME))
)
(defclass useRef (is-a Hook)
    (slot named     (type LEXEME))
    (slot default   (type LEXEME))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
