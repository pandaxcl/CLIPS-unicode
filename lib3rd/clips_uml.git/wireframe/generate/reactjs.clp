;;; vim: expandtab autoindent
;;; map <buffer> \\ :update<CR>:1tabnext<CR>:2wincmd w<CR>:silent normal \\<CR>:4tabnext<CR>

(defglobal ?*REACTJS* = UML.REACTJS)
(defglobal ?*PREFIX*  = Test)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defclass #WireFrame#JavaScript (is-a USER)
    (     slot wireframe    (type INSTANCE)(allowed-classes WireFrame))
    (     slot js:export    (type LEXEME))
    (     slot js:named     (type LEXEME))
    (multislot js:global    (type LEXEME))
    (multislot js:hook      (type LEXEME))
    (multislot js:local     (type LEXEME))
    (multislot js:return    (type LEXEME))
)
(defclass #Component#JavaScript (is-a USER)
    (     slot component (type INSTANCE)(allowed-classes Component))
    (multislot js:script (type LEXEME))
)
(defclass #Text#JavaScript (is-a USER)
    (slot component (type INSTANCE)(allowed-classes Component))
    (slot js:text   (type LEXEME))
)
(defclass #Button#JavaScript (is-a USER)
    (slot component     (type INSTANCE)(allowed-classes Component))
    (slot js:onClick    (type LEXEME))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deffunction get-expression-from-script ($?script)
    (bind ?code (join$ (create$ "(progn "(I ?script)")")))
    (bind ?expression (eval ?code))
    (bind ?javascript (send ?expression expression))
    (return ?javascript)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; @Script
(defrule 预处理#Component#JavaScript数据：make-instance
         (object (is-a  WireFrame           )(name       ?wireframe)(hook   $?hooks    )(named ?named)(uuid ?uuid))
         (object (is-a  Component           )(wireframe  ?wireframe)(name    ?component))
         (object (is-a  @Script             )(annotation ?component)(name    ?code     )(script $?script))
    (not (object (is-a #Component#JavaScript)(component  ?component)))
=>
    (make-instance of #Component#JavaScript (component ?component)(js:script ?script))
)
(defrule 预处理#Text#JavaScript数据：make-instance
         (object (is-a  WireFrame           )(name      ?wireframe)(hook      $?hooks    )(named ?named)(uuid ?uuid))
         (object (is-a  Text                )(wireframe ?wireframe)(name       ?component))
         (object (is-a #Component#JavaScript)(component ?component)(js:script $?script   ))
    (not (object (is-a      #Text#JavaScript)(component ?component)))
=>
    (bind ?javascript (get-expression-from-script ?script))
    (make-instance of #Text#JavaScript (component ?component)(js:text ?javascript))
)
(defrule 预处理#Button#JavaScript数据：make-instance
         (object (is-a  WireFrame           )(name       ?wireframe)(hook      $?hooks    )(named ?named)(uuid ?uuid))
         (object (is-a  Button              )(wireframe  ?wireframe)(name       ?component))
         (object (is-a #Component#JavaScript)(component  ?component)(js:script $?script   ))
    (not (object (is-a    #Button#JavaScript)(component  ?component)))
=>
    (bind ?javascript (get-expression-from-script ?script))
    (make-instance of #Button#JavaScript (component ?component)(js:onClick ?javascript))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule 预处理#WireFrame#JavaScript数据：make-instance
         (object (is-a  WireFrame           )(name      ?wireframe)(named ?named))
    (not (object (is-a #WireFrame#JavaScript)(wireframe ?wireframe)))
=>
    (make-instance of #WireFrame#JavaScript 
        (wireframe ?wireframe)
        (js:named ?named)
        (js:export (if (str-starts-with gen ?named) then "" else (str-cat export (S))))
    )
)
(defrule 预处理#WireFrame#JavaScript数据：js:hook、js:global
    (object (is-a  WireFrame           )(name      ?wireframe)(hook $?hooks))
    (object (is-a #WireFrame#JavaScript)(wireframe ?wireframe)(name ?js:wireframe))
=>
    (bind ?multifield:hook   (create$))
    (bind ?multifield:global (create$))
    (progn$ (?v ?hooks) (switch (class ?v)
        (case useScript then (if (send ?v get-global)
            then (bind ?multifield:global (append$ ?multifield:global (indent$ 0 (send ?v reactjs))))
            else (bind ?multifield:hook   (append$ ?multifield:hook   (indent$ 0 (send ?v reactjs))))
        ))
        (default (bind ?multifield:hook   (append$ ?multifield:hook   (indent$ 0 (send ?v reactjs)))))
    ))
    (slot-append$ ?js:wireframe js:hook   ?multifield:hook  )
    (slot-append$ ?js:wireframe js:global ?multifield:global)
)
(defrule 预处理#WireFrame#JavaScript数据：js:local
    (object (is-a  WireFrame           )(name      ?wireframe)(local $?locals))
    (object (is-a #WireFrame#JavaScript)(wireframe ?wireframe)(name ?js:wireframe))
=>
    (bind ?multifield (create$))
    (progn$ (?v ?locals)
        (bind ?properties (get-expression-from-script (send ?v get-properties)))
        (bind ?multifield (append-cat$ ?multifield (indent  0) function(S)(send ?v get-named)(S)(L)(I ?properties)(R)(S){(S)return(S)(L)))
        (bind ?multifield (append$     ?multifield (indent$ 1       (send ?v reactjs))))
        (bind ?multifield (append-cat$ ?multifield (indent  0) (R)}))
    )
    (modify-instance ?js:wireframe (js:local ?multifield))
)
(defrule 预处理#WireFrame#JavaScript数据：js:return
    (object (is-a  WireFrame           )(name      ?wireframe)(main ?main))
    (object (is-a #WireFrame#JavaScript)(wireframe ?wireframe)(name ?js:wireframe))
=>
    (bind ?multifield (create$))
    (bind ?multifield (append$ ?multifield (indent$ 0 (send ?main reactjs))))
    (modify-instance ?js:wireframe (js:return ?multifield))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule 生成ReactJS代码-开始
    (declare (salience -100))
=>
    (open (clips_cwd ?*PREFIX* .wireframe.js)  ?*REACTJS*  "w")

    (printout ?*REACTJS* (indent 0) "import React, { useState, useEffect, useContext, useReducer} from 'react';" crlf)
    (printout ?*REACTJS* (indent 0) "import { createStore, combineReducers } from 'redux';" crlf)
    (printout ?*REACTJS* (indent 0) "import { Checkbox } from 'antd';" crlf)
    (printout ?*REACTJS* (indent 0) "import { Row, Col } from 'antd';" crlf)
    (printout ?*REACTJS* (indent 0) "import { Radio, Button } from 'antd';" crlf)
    (printout ?*REACTJS* (indent 0) "import { List, Typography } from 'antd';" crlf)
)
(defrule 生成ReactJS代码-结束
    (declare (salience -300))
=>
    (close ?*REACTJS*)
)
(defrule 生成ReactJS代码
    (declare (salience -200))
    (object (is-a #WireFrame#JavaScript)
            (js:export   ?export)
            (js:named    ?name  )
            (js:global  $?globals)
            (js:hook    $?hooks )
            (js:local   $?locals)
            (js:return  $?return)
    )
=>
    (printout ?*REACTJS* (indent 0) (join$ ?globals  (N)(indent 0))             crlf)

    (printout ?*REACTJS* (indent 0) (I ?export)function(S)(I ?name)(S)"()"(S){  crlf)
    (printout ?*REACTJS* (indent 1)     (join$ ?hooks  (N)(indent 1))           crlf)
    (printout ?*REACTJS* (indent 1)     (join$ ?locals (N)(indent 1))           crlf)
    (printout ?*REACTJS* (indent 1)     return(L)                               crlf)
    (printout ?*REACTJS* (indent 2)         (join$ ?return (N)(indent 2))       crlf)
    (printout ?*REACTJS* (indent 1)     (R)                                     crlf)
    (printout ?*REACTJS* (indent 0) }                                           crlf)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; reactjs parser for semantics of ReactUI

(defmessage-handler Text reactjs ()
    (do-for-instance ((?x #Text#JavaScript)) (eq (instance-name ?self) (send ?x get-component))
        (return (create$ (str-cat {(send ?x get-js:text)})))
    )
    (return (create$ (str-cat (I ?self:text))))
)
(defmessage-handler Component reactjs () (create$ (str-cat <unknown-Component(S)/>)))
(defmessage-handler Container reactjs () 
    (bind ?multifield (create$))
    (bind ?multifield (append-cat$ ?multifield (indent  0)<(class ?self)>))
    (progn$ (?v ?self:children)
        (bind ?multifield (append$ ?multifield (indent$ 1 (send ?v reactjs))))
    )
    (bind ?multifield (append-cat$ ?multifield (indent  0)</(class ?self)>))
    (return ?multifield)
)
(defmessage-handler Embed reactjs () 
    (create$ (str-cat <(send ?self get-default)(S)/>))
)
(defmessage-handler Button reactjs ()
    (do-for-instance ((?x #Button#JavaScript)) (eq (instance-name ?self) (send ?x get-component))
        (return (create$ (str-cat <Button(S)onClick={"()"=>{(send ?x get-js:onClick)}}>
                                    (send ?self get-title)
                                  </Button>)))
    )
    (return (create$ (str-cat <Button>(send ?self get-title )</Button>)))
)
(defmessage-handler Check  reactjs () (create$ (str-cat <Check >(send ?self get-title )</Check >)))
(defmessage-handler Radio  reactjs () (create$ (str-cat <Radio >(send ?self get-title )</Radio >)))

(defmessage-handler List reactjs () 
    (bind ?multifield (create$))
    (bind ?multifield (append-cat$     ?multifield (indent  0)< List>))
    (progn$ (?v (send ?self get-children))
        (bind ?multifield (append-cat$ ?multifield (indent  1)< List.Item>))
        (bind ?multifield (    append$ ?multifield (indent$ 2 (send ?v reactjs))))
        (bind ?multifield (append-cat$ ?multifield (indent  1)</List.Item>))
    )
    (bind ?multifield (append-cat$     ?multifield (indent  0)</List>))
    (return ?multifield)
)

(defmessage-handler Grid reactjs ()
    (bind ?gutter (send ?self get-gutter ))
    (bind ?rows   (send ?self get-rows   ))
    (bind ?cols   (send ?self get-columns))
    (bind ?multifield (create$))
    (if (= 1 (length$ (send ?self get-children)));;; 只有一个child的时候，就成了repeat模式了
        then;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            (loop-for-count (?row ?rows)
                (bind ?multifield     (append-cat$ ?multifield (indent 0)< Row>))
                (loop-for-count (?col ?cols) 
                    (bind ?multifield (append-cat$ ?multifield (indent 1)  <Col>(send (nth$ 1 (send ?self get-children)) reactjs)</Col>))
                )
                (bind ?multifield     (append-cat$ ?multifield (indent 0)</Row>))
            )
        else;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            (bind ?multifield         (append-cat$ ?multifield (indent  0)<div>))
            (loop-for-count (?row ?rows)
                (bind ?multifield     (append-cat$ ?multifield (indent  1)< Row>))
                (loop-for-count (?col ?cols)
                    (do-for-instance ((?G @Grid))(and (eq (instance-name ?self) (send (send ?G get-annotation) get-owner))
                                                      ( = ?row        (send ?G get-row       ))
                                                      ( = ?col        (send ?G get-column    )))
                        (bind ?child (send ?G get-annotation))
                        (bind ?span  (str-cat span={(send ?G get-span)}))
                        (bind ?child:reactjs (send ?child reactjs))
                        (if (> (length$ ?child:reactjs) 1) 
                             then (bind ?multifield (append-cat$ ?multifield (indent  2)<Col(S)(I ?span)>))
                                  (bind ?multifield (    append$ ?multifield (indent$ 3       ?child:reactjs)))
                                  (bind ?multifield (append-cat$ ?multifield (indent  2)</Col>))
                             else (bind ?multifield (append-cat$ ?multifield (indent  2) <Col(S)(I ?span)>(I ?child:reactjs)</Col>))
                        )
                    )
                )
                (bind ?multifield     (append-cat$ ?multifield (indent  1)</Row>))
            )
            (bind ?multifield         (append-cat$ ?multifield (indent  0)</div>))
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    )
;   (loop-for-count (?row ?self:rows)
;       (bind ?multifield     (append-cat$ ?multifield (indent  0)< Row>))
;       (loop-for-count (?col ?self:columns)
;           (bind ?multifield (append-cat$ ?multifield (indent  1)  <Col>(send ?)</Col>))
;       )
;       (bind ?multifield     (append-cat$ ?multifield (indent  0)</Row>))
;   )
    (return ?multifield)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmessage-handler Hook reactjs ()
    (bind ?multifield (create$))
    (bind ?multifield (append-cat$ ?multifield (indent 0) "// default implementation for hook: "(class ?self)))
    (return ?multifield)
)
(defmessage-handler useState reactjs ()
    (bind ?multifield (create$))
    (bind ?multifield (append-cat$ ?multifield (indent 0) const [(I ?self:getter), (I ?self:setter)] = useState(L)(I ?self:default)(R)))
    (return ?multifield)
)
(defmessage-handler useScript reactjs () 
    (do-for-instance ((?script @Script))(eq (instance-name ?self)(send ?script get-annotation))
        (return (send ?script get-script))
    )
    (return (create$ "<Script with out @Script annotation />"))
)
(defmessage-handler useReducer reactjs ()
    (bind ?parameters (create$))

    (if (neq nil ?self:reducer) then (bind ?parameters (append$ ?parameters ?self:reducer)))
    (if (neq nil ?self:state  ) then (bind ?parameters (append$ ?parameters ?self:state  )))
    (if (neq nil ?self:prepare) then (bind ?parameters (append$ ?parameters ?self:prepare)))

    (bind   ?multifield (create$))
    (bind   ?multifield (append-cat$ ?multifield (indent 0) const(S)[state, dispatch](S)=(S)useReducer(L)(join$ ?parameters ", ")(R)))
    (return ?multifield)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmessage-handler Expression#Variable expression () (str-cat (send ?self get-named)))
(defmessage-handler Expression#Invoke   expression ()
    (bind ?arguments (create$))
    (progn$ (?v (send ?self get-arguments))
        (bind ?arguments (append$ ?arguments (send ?v expression)))
    )
    (str-cat (send ?self get-function)(L)(join$ ?arguments ", ")(R))
)
(defmessage-handler Expression#Numeric expression ()
    (str-cat (send ?self:left expression)(S)(send ?self get-symbol)(S)(send ?self:right expression))
)
(defmessage-handler Expression#KeyPath expression ()
    (join$ ?self:path ".")
)
(defmessage-handler Expression#Parameter expression ()
    (bind ?multifield (create$))
    (if (neq nil ?self:parameter) then (bind ?multifield (append$ ?multifield ?self:parameter)))
    (if (neq nil ?self:default  ) then (bind ?multifield (append$ ?multifield ?self:default  )))
    (return (join$ ?multifield " = "))
)
