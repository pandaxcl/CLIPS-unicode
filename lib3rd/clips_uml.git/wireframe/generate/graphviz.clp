;;; vim: expandtab autoindent
;;; map <buffer> \\ :update<CR>:1tabnext<CR>:2wincmd w<CR>:silent normal \\<CR>:3tabnext<CR>

(defglobal ?*GRAPHVIZ* = UML.GRAPHVIZ)
(defglobal ?*PREFIX* = Test)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defgeneric #GraphVizParse)
(defmethod  #GraphVizParse 10 ((?x USER)    ) (halt-method-with-arguments #GraphVizParse ?x))
(defmethod  #GraphVizParse 11 ((?x USER) $?X) (halt-method-with-arguments #GraphVizParse ?x (expand$ ?X)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defclass #ToMany#GraphViz (is-a USER)
    (     slot component:source (type INSTANCE)(allowed-classes  Component))
    (     slot wireframe        (type INSTANCE)(allowed-classes  WireFrame))
    (multislot script           (type LEXEME))
    (multislot connections      (type INSTANCE)(allowed-classes  #Connection#GraphViz))
    (     slot edge:source      (type LEXEME))
    (     slot default          (type INSTANCE)(allowed-classes  #Connection#GraphViz))
)
(defclass #Connection#GraphViz (is-a USER)
    (slot connection  (type INSTANCE)(allowed-classes @Connection))
    (slot component:source  (type INSTANCE)(allowed-classes  Component))
    (slot component:target  (type INSTANCE)(allowed-classes  Component))
    (slot wireframe   (type INSTANCE)(allowed-classes  WireFrame))
    (slot port:middle (type LEXEME))
    (slot edge:source (type LEXEME))
    (slot edge:target (type LEXEME))
    (slot edge:region (type LEXEME)(allowed-symbols hook local wireframe global)(default local))
    (multislot script (type LEXEME))
)
(defclass #Script#GraphViz (is-a USER)
    (slot wireframe     (type INSTANCE)(allowed-classes WireFrame))
    (slot component     (type INSTANCE)(allowed-classes Component))
    (multislot script   (type LEXEME))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GraphViz预处理规则
(defrule 预处理#ToMany#GraphViz数据：make-instance
         (object (is-a  WireFrame      )                             (name       ?wireframe))
         (object (is-a  Component      )(name             ?component)(wireframe  ?wireframe)(dock ?dock&:(neq [nil] ?dock)))
        ;(object (is-a @Script         )(annotation       ?component)(script    $?script))
         (object (is-a @ToMany         )(annotation       ?component)(one        ?component))
    (not (object (is-a #ToMany#GraphViz)(component:source ?component)(wireframe  ?wireframe)))
=>
    (bind ?edge:source (str-cat (Q (send ?dock get-uuid)) : (Q (send ?component get-uuid))))
    (bind ?script (do-for-instance ((?script @Script)) (eq ?component (send ?script get-annotation))
        (send ?script get-script)
    ))
    (make-instance of #ToMany#GraphViz
        (wireframe        ?wireframe)
        (component:source ?component)
        (script           (if ?script then ?script else (create$)))
        (edge:source      ?edge:source))
)
(defrule 预处理#ToMany#GraphViz数据：connections
    (object (is-a  WireFrame          )                             (name      ?wireframe))
    (object (is-a  Component          )(name             ?component)(wireframe ?wireframe))
    (object (is-a     #ToMany#GraphViz)(component:source ?component)(wireframe ?wireframe)(name ?many))
    (object (is-a #Connection#GraphViz)(component:source ?component)(wireframe ?wireframe)(name ?one ))
=>
    (slot-append$ ?many connections ?one)
)
(defrule 预处理#ToMany#GraphViz数据：default
    (object (is-a            WireFrame)                             (name      ?wireframe))
    (object (is-a            Component)(name             ?component)(wireframe ?wireframe))
    (object (is-a              @ToMany)(annotation       ?component)(default   ?default  )(name ?x))
    (object (is-a     #ToMany#GraphViz)(component:source ?component)(wireframe ?wireframe)(name ?toMany    ))
    (object (is-a #Connection#GraphViz)(component:source ?component)(wireframe ?wireframe)(name ?connection)(component:target ?default))
=>
    (message-modify-instance ?toMany (default ?connection))
)
(defrule 预处理#Connection#GraphViz数据：make-instance
         (object (is-a   WireFrame         )                        (name      ?wireframe))
         (object (is-a   Component         )(name       ?component )(wireframe ?wireframe))
         (object (is-a @Connection         )(name       ?connection)(source    ?source)(target ?target)(script $?script))
    (not (object (is-a #Connection#GraphViz)(connection ?connection)(wireframe ?wireframe)))
=>
    (make-instance of #Connection#GraphViz
        (connection       ?connection)
        (wireframe        ?wireframe )
        (component:source ?source    )
        (component:target ?target    )
        (script           ?script    ))
)
(defrule 预处理#Connection#GraphViz数据：edge:source、edge:target、port:middle
    (not (object (is-a WireFrame)(main ?x&:(eq [nil] ?x))))
    (object (is-a   WireFrame         )                              (name      ?wireframe))
    (object (is-a   Component         )(name             ?component )(wireframe ?wireframe)(dock   ?dock  &:(neq [nil] ?dock  )))
    (object (is-a @Connection         )(name             ?connection)(source    ?component)(target ?target&:(neq [nil] ?target)))
    (object (is-a #Connection#GraphViz)(connection       ?connection)(wireframe ?wireframe)(name ?connection:graphviz))
    (object (is-a     #ToMany#GraphViz)(component:source ?component )(wireframe ?wireframe)(name ?many)(edge:source ?edge:source))
=>
    (modify-instance ?connection:graphviz
        (edge:source ?edge:source)
        (edge:target (str-cat (Q (send ?target get-uuid)) : (Q (send ?component get-uuid))))
        (port:middle (str-cat (send ?target get-uuid)))
    )
    (if (eq WireFrame (class ?target)) then (bind ?target (send ?target get-main))
        (modify-instance ?connection:graphviz
            (edge:target (str-cat (Q (send ?target get-uuid)) : (Q (send ?component get-uuid)))))
    )
   ;(send ?connection:graphviz print)
   ;(send ?component print)
)
(defrule 预处理#Connection#GraphViz数据：edge:region
    (not (object (is-a WireFrame)(main ?x&:(eq [nil] ?x))))
    (object (is-a   WireFrame         )                        (name      ?wireframe)(local $?local)(main ?main))
    (object (is-a   Component         )(name       ?component )(wireframe ?wireframe)(dock   ?dock  &:(neq [nil] ?dock  )))
    (object (is-a @Connection         )(name       ?connection)(source    ?component)(target ?target&:(neq [nil] ?target)))
    (object (is-a #Connection#GraphViz)(connection ?connection)(wireframe ?wireframe)(name ?connection:graphviz))
=>
    ;;; 先找local的命名组件，找到之后，就不到global里去找同名WireFrame了
    (bind ?OK FALSE)
    (if (not ?OK) then (progn$ (?v ?local) (if (eq (send ?target get-named) (send ?v get-named)) then
        (message-modify-instance ?connection:graphviz (edge:region wireframe))
        (bind ?OK TRUE)(break)
    )))
    (if (not ?OK) then (do-for-all-instances ((?v WireFrame)) (eq (send ?target get-named) (send ?v get-named))
        (message-modify-instance ?connection:graphviz (edge:region global))
        (bind ?OK TRUE)(break)
    ))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule 预处理#Script#GraphViz数据：Component的script
;    (object (is-a  WireFrame)(name      ?wireframe))
;    (object (is-a  Component)(wireframe ?wireframe)(script $?script)(name ?component))
;=>
;    (make-instance of #Script#GraphViz
;        (wireframe ?wireframe)
;        (component ?component)
;        (script    ?script))
;)
(defrule 预处理#Script#GraphViz数据：@Script的script
    (object (is-a  WireFrame)(name      ?wireframe))
    (object (is-a  Component)(wireframe ?wireframe)(name       ?component))
    (object (is-a    @Script)(script   $?script   )(annotation ?component))
=>
    (make-instance of #Script#GraphViz
        (wireframe ?wireframe)
        (component ?component)
        (script    ?script))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule 生成GraphViz代码-开始
    (declare (salience -100))
=>
    (open (clips_cwd ?*PREFIX* .wireframe.dot) ?*GRAPHVIZ* "w")

    (printout ?*GRAPHVIZ* (indent 0) digraph { crlf)
   ;(printout ?*GRAPHVIZ* (indent 1)     graph(S)[landscape=true] crlf)
   ;(printout ?*GRAPHVIZ* (indent 1)     graph(S)[layout=neato] crlf)
   ;(printout ?*GRAPHVIZ* (indent 1)     graph(S)[layout=fdp] crlf)
   ;(printout ?*GRAPHVIZ* (indent 1)     graph(S)[splines=ortho] crlf)
   ;(printout ?*GRAPHVIZ* (indent 1)     graph(S)[splines=curved] crlf)
   ;(printout ?*GRAPHVIZ* (indent 1)     graph(S)[splines=spline] crlf)
    (printout ?*GRAPHVIZ* (indent 1)     graph(S)[compound=true] crlf)
    (printout ?*GRAPHVIZ* (indent 1)     graph(S)[rankdir=(Q LR)] crlf)
    (printout ?*GRAPHVIZ* (indent 1)     node(S)[shape=none] crlf)
)
(defrule 生成GraphViz代码-结束
    (declare (salience -300))
=>
    (printout ?*GRAPHVIZ* (indent 0) } crlf)
    (close ?*GRAPHVIZ*)
)
(defrule 生成GraphViz代码
    (declare (salience -200))
    (not (object (is-a Component&~WireFrame)(owner     ?x&:(eq [nil] ?x))))
    (not (object (is-a Component&~WireFrame)(wireframe ?x&:(eq [nil] ?x))))
    (not (object (is-a Component&~WireFrame)(dock      ?x&:(eq  nil  ?x))))
    (object (is-a WireFrame) (name ?wireframe)
            (hook $?hook-list)
            (local $?local-component-list)
            (main ?main-component&:(neq [nil] ?main-component)))
=>
    (bind ?region:hook      (create$))
    (bind ?region:local     (create$))
    (bind ?region:main      (create$))
    (bind ?region:global    (create$))
    (bind ?region:wireframe (create$))
    ;;; region:hook
    (progn (if (not-empty$ ?hook-list) then
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (bind ?hook:useProperty (create$))
        (bind ?hook:useState    (create$))
        (bind ?hook:useEffect   (create$))
        (bind ?hook:useContext  (create$))
        (bind ?hook:useReducer  (create$))
        (bind ?hook:useScript   (create$))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (progn$ (?v ?hook-list) (switch (class ?v)
            (case useProperty then (bind ?hook:useProperty (append$ ?hook:useProperty ?v)))
            (case useState    then (bind ?hook:useState    (append$ ?hook:useState    ?v)))
            (case useEffect   then (bind ?hook:useEffect   (append$ ?hook:useEffect   ?v)))
            (case useContext  then (bind ?hook:useContext  (append$ ?hook:useContext  ?v)))
            (case useReducer  then (bind ?hook:useReducer  (append$ ?hook:useReducer  ?v)))
            (case useScript   then (bind ?hook:useScript   (append$ ?hook:useScript   ?v)))
        ))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (bind ?table:hook (TABLE))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;;; table:useProperty
        (if (not-empty$ ?hook:useProperty) then (bind ?hooks ?hook:useProperty)
            (bind ?table (TABLE (TR (TD (TEXT   named) BGCOLOR: gray90)
                                    (TD (TEXT default) BGCOLOR: gray90))))
            (if (not-empty$ ?hooks) then
                (progn$ (?v ?hooks) (slot-append$ ?table 行 (#GraphVizParse ?v)))
            )
            (slot-append$ ?table:hook 行 (TR (TD (TEXT useProperty)) (TD ?table)))
        )
        ;;; table:useState
        (if (not-empty$ ?hook:useState) then (bind ?hooks ?hook:useState)
            (bind ?table (TABLE (TR (TD (TEXT  getter) BGCOLOR: gray90)
                                    (TD (TEXT  setter) BGCOLOR: gray90)
                                    (TD (TEXT default) BGCOLOR: gray90))))
            (if (not-empty$ ?hooks) then
                (progn$ (?v ?hooks) (slot-append$ ?table 行 (#GraphVizParse ?v)))
            )
            (slot-append$ ?table:hook 行 (TR (TD (TEXT useState)) (TD ?table)))
        )
        ;;; table:useEffect
        (if (not-empty$ ?hook:useEffect) then (bind ?hooks ?hook:useEffect)
            (bind ?table (TABLE (TR (TD (TEXT effect) BGCOLOR: gray90)
                                    (TD (TEXT  clear) BGCOLOR: gray90))))
            (if (not-empty$ ?hooks) then
                (progn$ (?v ?hooks) (slot-append$ ?table 行 (#GraphVizParse ?v)))
            )
            (slot-append$ ?table:hook 行 (TR (TD (TEXT useEffect)) (TD ?table)))
        )
        ;;; table:useContext
        (if (not-empty$ ?hook:useContext) then (bind ?hooks ?hook:useContext)
            (bind ?table (TABLE (TR (TD (TEXT context) BGCOLOR: gray90))))
            (if (not-empty$ ?hooks) then
                (progn$ (?v ?hooks) (slot-append$ ?table 行 (#GraphVizParse ?v)))
            )
            (slot-append$ ?table:hook 行 (TR (TD (TEXT useContext)) (TD ?table)))
        )
        ;;; table:useReducer
        (if (not-empty$ ?hook:useReducer) then (bind ?hooks ?hook:useReducer)
            (bind ?table (TABLE (TR (TD (TEXT reducer) BGCOLOR: gray90)
                                    (TD (TEXT   state) BGCOLOR: gray90)
                                    (TD (TEXT prepare) BGCOLOR: gray90))))
            (if (not-empty$ ?hooks) then
                (progn$ (?v ?hooks) (slot-append$ ?table 行 (#GraphVizParse ?v)))
            )
            (slot-append$ ?table:hook 行 (TR (TD (TEXT useReducer)) (TD ?table)))
        )
        ;;; table:useScript
        (if (not-empty$ ?hook:useScript) then (bind ?hooks ?hook:useScript)
            (bind ?table (TABLE (TR (TD (TEXT script) BGCOLOR: gray90)
                                    (TD (TEXT global) BGCOLOR: gray90))))
            (if (not-empty$ ?hooks) then
                (progn$ (?v ?hooks) (slot-append$ ?table 行 (#GraphVizParse ?v)))
            )
            (slot-append$ ?table:hook 行 (TR (TD (TEXT useScript)) (TD ?table)))
        )
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (bind ?label (sym-cat label=<(join$ (send ?table:hook graphviz) "")>))
        (bind ?region:hook (append-cat$ ?region:hook (Q (send ?wireframe get-uuid)#hook)[(I ?label)]))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ))
    ;;; local components
    (progn$ (?v ?local-component-list)
       ;(bind ?text  (if (str-starts-with "gen" (send ?v get-named)) then "" else (str-cat "&#x058D;" (send ?v get-named) "&#x058E;")))
       ;(bind ?text  (if (str-starts-with "gen" (send ?v get-named)) then "" else (str-cat "&#x25BB;" (send ?v get-named) "&#x25C5;")))
        (bind ?text  (if (str-starts-with "gen" (send ?v get-named)) then "" else (str-cat "&#x25CC;" (send ?v get-named) "&#x25CC;")))
       ;(bind ?text  (str-cat name:(send ?v get-named)#uuid:(send ?v get-uuid)))
        (bind ?table (TABLE (TR (TD (TEXT ?text))) (TR (TD (#GraphVizParse ?v)))))
        (bind ?label (sym-cat label=<(join$ (send ?table graphviz) "")>))
        (bind ?region:local (append-cat$ ?region:local (Q (send ?v get-uuid))[(I ?label)]))
    )
    ;;; main component
    (progn
        (bind ?graphviz:main (send (#GraphVizParse ?main-component) graphviz))
        (bind ?region:main (append-cat$ ?region:main (Q (send ?main-component get-uuid))(S)[label=<(join$ ?graphviz:main "")>]))
    )
    ;;; connections
    (do-for-all-instances ((?many #ToMany#GraphViz)) (eq ?wireframe (send ?many get-wireframe))
        (bind ?component   (send ?many get-component:source))
        (bind ?edge:source (send ?many get-edge:source))
        (bind ?edge:middle (str-cat (Q (send ?component get-uuid) # middle)))
        (bind ?region:global (append-cat$ ?region:global (I ?edge:source)(S)->(S)(I ?edge:middle)(S) [ dir=both,arrowtail= dot,color=gray ]))
        (progn$ (?one (send ?many get-connections))
            (bind ?edge:target (send ?one get-edge:target))
            (bind ?edge:region (send ?one get-edge:region))
            (bind ?port:middle (send ?one get-port:middle))
            (bind ?region:global (append-cat$ ?region:global (I ?edge:middle):(Q ?port:middle)(S)->(S)(I ?edge:target)(S) [ dir=both,arrowtail=dot,color=gray ]))
        )

        (bind ?table:left  (TABLE))
        (bind ?table:right (TABLE))
        (progn$ (?one (send ?many get-connections)) (bind ?table:target (TABLE))
            (bind ?style (if (eq ?one (send ?many get-default)) then (create$ BGCOLOR: gray70) else (create$)))
            (progn (bind ?table ?table:target) (bind ?script (send ?one get-script)) (if (> (length$ ?script) 0)
                then (progn$ (?v ?script) (slot-append$ ?table 行 (TR (TD (TEXT ?v) ALIGN: LEFT (expand$ ?style)))))
                else (slot-append$ ?table  行 (TR (TD (TEXT "") (expand$ ?style))))
            ))
            (bind ?port (send ?one get-port:middle))
            (slot-append$ ?table:right 行 (TR (TD ?table:target PORT: ?port)))
        )
        (progn (bind ?table ?table:left) (bind ?script (send ?many get-script)) (if (> (length$ ?script) 0)
            then (progn$ (?v ?script) (slot-append$ ?table 行 (TR (TD (TEXT ?v) ALIGN: LEFT))))
            else (slot-append$ ?table  行 (TR (TD (TEXT ""))))
        ))
        (progn
            (bind ?table (TABLE (TR (TD ?table:left)(TD ?table:right))))
            (bind ?style (str-cat shape=none,style=rounded,margin=0,label=<(join$ (send ?table graphviz) "")>))
            (switch ?edge:region
                (case local     then (bind ?region:local     (append-cat$ ?region:local     (I ?edge:middle)(S)[(I ?style)])))
                (case wireframe then (bind ?region:wireframe (append-cat$ ?region:wireframe (I ?edge:middle)(S)[(I ?style)])))
                (case global    then (bind ?region:global    (append-cat$ ?region:global    (I ?edge:middle)(S)[(I ?style)])))
            )
        )
    )
    ;;; script
    (do-for-all-instances ((?script:graphviz #Script#GraphViz)) (eq ?wireframe (send ?script:graphviz get-wireframe))
        (bind ?text:script       (send ?script:graphviz get-script))
        (bind ?node:component    (send ?script:graphviz get-component))
        (bind ?node:title        (send ?node:component get-named))
        (bind ?node:uuid         (send ?node:component get-uuid))
        (bind ?edge:target:port  (send ?node:component get-uuid))
        (bind ?edge:target:table (send (send ?wireframe get-main) get-uuid))
        (bind ?edge:style        (str-cat color=gray,style=dashed,dir=both,arrowtail=odot,arrowhead=vee))
        (if (not-empty$ ?text:script) then
            (bind ?table (TABLE)) (progn$ (?script ?text:script)
                (slot-append$ ?table 行 (TR (TD (TEXT ?script) ALIGN: LEFT)))
            )
            (bind ?region:wireframe (append-cat$ ?region:wireframe (Q script: ?node:uuid)(S) [ label=<(join$ (send ?table graphviz) "")> ]))
            (bind ?region:wireframe (append-cat$ ?region:wireframe (Q script: ?node:uuid)(S)->(S)(Q ?edge:target:table):(Q ?edge:target:port) [(I ?edge:style)]))
        )
    )
    ;;; output graphviz
    (bind ?token (send ?wireframe get-named))
    (printout ?*GRAPHVIZ* (indent  1) subgraph(S)(Q cluster_(I ?token))(S){                                         crlf)
    (printout ?*GRAPHVIZ* (indent  2)   label=(if (str-starts-with "gen" ?token) then (Q " ") else (Q ?token))      crlf)
   ;(printout ?*GRAPHVIZ* (indent  2)   label=(Q name:(send ?wireframe get-named)#uuid:(send ?wireframe get-uuid))  crlf)
    (printout ?*GRAPHVIZ* (indent  2)   labelloc =(Q t)(S)labeljust=(Q l)                                           crlf)
   ;(printout ?*GRAPHVIZ* (indent  2)   labeljust=(Q l)                                                             crlf)
   ;(printout ?*GRAPHVIZ* (indent  2)   subgraph(S)(Q cluster_(I ?token)_hook)(S){                                  crlf)
   ;(printout ?*GRAPHVIZ* (indent  3)       label    =(Q hook)                                                      crlf)
   ;(printout ?*GRAPHVIZ* (indent  3)       labelloc =(Q t)                                                         crlf)
   ;(printout ?*GRAPHVIZ* (indent  3)       labeljust=(Q l)                                                         crlf)
    (printout ?*GRAPHVIZ* (indent  3)       (join$ ?region:hook (N)(indent 3))                                      crlf)
   ;(printout ?*GRAPHVIZ* (indent  2)   }                                                                           crlf)
   ;(printout ?*GRAPHVIZ* (indent  2)   subgraph(S)(Q cluster_(I ?token)_local)(S){                                 crlf)
   ;(printout ?*GRAPHVIZ* (indent  3)       label    =(Q local)                                                     crlf)
   ;(printout ?*GRAPHVIZ* (indent  3)       labelloc =(Q t)                                                         crlf)
   ;(printout ?*GRAPHVIZ* (indent  3)       labeljust=(Q l)                                                         crlf)
    (printout ?*GRAPHVIZ* (indent  3)       (join$ ?region:local (N)(indent 3))                                     crlf)
   ;(printout ?*GRAPHVIZ* (indent  2)   }                                                                           crlf)
   ;(printout ?*GRAPHVIZ* (indent  2)   subgraph(S)(Q cluster_(I ?token)_main)(S){                                  crlf)
   ;(printout ?*GRAPHVIZ* (indent  3)       label    =(Q main)                                                      crlf)
   ;(printout ?*GRAPHVIZ* (indent  3)       labelloc =(Q t)                                                         crlf)
   ;(printout ?*GRAPHVIZ* (indent  3)       labeljust=(Q l)                                                         crlf)
    (printout ?*GRAPHVIZ* (indent  3)       (join$ ?region:main (N)(indent 3))                                      crlf)
   ;(printout ?*GRAPHVIZ* (indent  2)   }                                                                           crlf)
    (printout ?*GRAPHVIZ* (indent  2)   (join$ ?region:wireframe (N)(indent 2))                                     crlf)
    (printout ?*GRAPHVIZ* (indent  1) }                                                                             crlf)
    (printout ?*GRAPHVIZ* (indent  1) (join$ ?region:global (N)(indent 1))                                          crlf)
   ;(send ?table delete)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmessage-handler Component graphviz () (send (#GraphVizParse ?self) graphviz))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod #GraphVizParse 100 ((?self Embed))
    (bind ?default (send ?self get-default))
    (do-for-instance ((?reference @Reference)) (and (eq ?self    (send ?reference get-annotation))
                                                    (eq ?default (send ?reference get-reference )))
        (bind ?embed (#GraphVizParse (send ?reference get-target)))
        (return (TABLE (TR (TD ?embed PORT: (send ?self get-uuid)
                                     COLOR: blue))))
    )
    (return (TABLE (TR (TD (TEXT (str-cat { reference: ?default }))))))
)

(defmethod #GraphVizParse 200 ((?self Text     )) (TEXT (send ?self get-text)))
(defmethod #GraphVizParse 210 ((?self Label    )) (TEXT (send ?self get-text)))
(defmethod #GraphVizParse 220 ((?self TextField)) (TEXT (send ?self get-text) COLOR: gray))
(defmethod #GraphVizParse 230 ((?self TextArea )) (TEXT (send ?self get-text)))

(defmethod #GraphVizParse 300 ((?self Component)) (TEXT (str-cat "{"(class ?self)"}")))
(defmethod #GraphVizParse 400 ((?self Button   ))
   ;(bind ?text (TEXT (str-cat           [(send ?self get-title)])))
   ;(bind ?text (TEXT (str-cat "&#x140A;" (send ?self get-title) "&#x1405;")))
   ;(bind ?text (TEXT (str-cat "&#x02C2;" (send ?self get-title) "&#x02C3;")))
   ;(bind ?text (TEXT (str-cat "&#x00AB;" (send ?self get-title) "&#x00BB;")))
   ;(bind ?text (TEXT (str-cat "&#x276E;" (send ?self get-title) "&#x276F;")))
   ;(bind ?text (TEXT (str-cat "&#x2045;" (send ?self get-title) "&#x2046;")))
    (bind ?text (TEXT (str-cat "&#x27E8;" (send ?self get-title) "&#x27E9;")) STYLE: ROUNDED)
    (do-for-instance ((?link @Link)) (eq ?self (send ?link get-annotation))
        (return (TABLE (TR (TD ?text PORT: (send ?self get-uuid)
                                    COLOR: green
                                    STYLE: ROUNDED))))
    )
    (return (TABLE (TR (TD ?text)) BORDER: 0))
)
(defmethod #GraphVizParse 500 ((?self Check))
   ;(bind ?status (if (send ?self get-checked) then "[X]" else "[ ]"))
    (bind ?status (if (send ?self get-checked) then "&#x2611;" else "&#x2612;"))
   ;(bind ?status (if (send ?self get-checked) then "&#x2611;" else "&#x25A1;"))
    (TEXT (str-cat (I ?status)(S)(send ?self get-title)))
)
(defmethod #GraphVizParse 600 ((?self Radio))
   ;(bind ?status (if (send ?self get-selected) then "(*)" else "( )"))
    (bind ?status (if (send ?self get-selected) then "&#x25C9;" else "&#x25CE;"))
   ;(bind ?status (if (send ?self get-selected) then "&#x25C9;" else "&#x25EF;"))
    (TEXT (str-cat (I ?status)(S)(send ?self get-title)))
)
(defmethod #GraphVizParse 610 ((?self Switch))
    (bind ?title  (send ?self get-title ))
    (bind ?status (send ?self get-status))
    (switch ?status
        (case ON  then (TABLE (TR (TD (TEXT ON    ))
                                  (TD (TEXT ?title) BORDER: 1 STYLE: ROUNDED BGCOLOR: white)) BGCOLOR: green STYLE: ROUNDED CELLSPACING: 1 CELLBORDER: 0))
        (case OFF then (TABLE (TR (TD (TEXT ?title) BORDER: 1 STYLE: ROUNDED BGCOLOR: white)
                                  (TD (TEXT OFF   ))) BGCOLOR: gray80 STYLE: ROUNDED CELLSPACING: 1 CELLBORDER: 0))
        (default (TEXT (str-cat (I ?status)(S)(I ?title))))
    )
)
;;; Container
(defmethod #GraphVizParse 700 ((?self Container)) (#GraphVizParse ?self (expand$ (send ?self get-children))))
(defmethod #GraphVizParse 701 ((?self Container) ?child) (#GraphVizParse ?child))
(defmethod #GraphVizParse 702 ((?self Container) ?A ?B $?C)
    (bind ?table (TABLE))
    (progn$ (?v (create$ ?A ?B ?C)) (slot-append$ ?table 行 (TR (TD (#GraphVizParse ?v) PORT: (send ?v get-uuid)))))
    (return ?table)
)
;;; List
(defmethod #GraphVizParse 800 ((?self List)) (#GraphVizParse ?self (expand$ (send ?self get-children))))
(defmethod #GraphVizParse 801 ((?self List) $?children)
    (bind ?n (max 1 (send ?self get-repeat)))
    (switch (send ?self get-direction)
        (case vertical then
            (bind ?table (TABLE))
            (progn$ (?v ?children) (loop-for-count ?n (slot-append$ ?table 行 (TR (TD (#GraphVizParse ?v) PORT: (send ?v get-uuid))))))
            (return ?table)
        )
        (case horizontal then
            (bind ?TR (TR))
            (progn$ (?v ?children) (loop-for-count ?n (slot-append$ ?TR 列 (TD (#GraphVizParse ?v) PORT: (send ?v get-uuid)))))
            (return (TABLE ?TR))
        )
        (default
            (TABLE (TR (TD (TEXT unknown-list-direction))))
        )
    )
)
;;; Layout
(defmethod #GraphVizParse 900 ((?self Layout)) (#GraphVizParse ?self (expand$ (send ?self get-children))))
(defmethod #GraphVizParse 901 ((?self Layout) (?header Header)(?body Content Layout)(?footer Footer))
    (TABLE (TR (TD (#GraphVizParse ?header) PORT: (send ?header get-uuid)))
           (TR (TD (#GraphVizParse ?body  ) PORT: (send ?body   get-uuid)))
           (TR (TD (#GraphVizParse ?footer) PORT: (send ?footer get-uuid))))
)
(defmethod #GraphVizParse 902 ((?self Layout) (?header Header)(?body Content Layout))
    (TABLE (TR (TD (#GraphVizParse ?header) PORT: (send ?header get-uuid)))
           (TR (TD (#GraphVizParse ?body  ) PORT: (send ?body   get-uuid))))
)
(defmethod #GraphVizParse 903 ((?self Layout) (?body Content Layout)(?footer Footer))
    (TABLE (TR (TD (#GraphVizParse ?body  ) PORT: (send ?body   get-uuid)))
           (TR (TD (#GraphVizParse ?footer) PORT: (send ?footer get-uuid))))
)
(defmethod #GraphVizParse 904 ((?self Layout) (?left Sider)(?body Content Layout)(?right Sider))
    (TABLE (TR (TD (#GraphVizParse ?left ) PORT: (send ?left  get-uuid))
               (TD (#GraphVizParse ?body ) PORT: (send ?body  get-uuid))
               (TD (#GraphVizParse ?right) PORT: (send ?right get-uuid))))
)
(defmethod #GraphVizParse 905 ((?self Layout) (?left Sider)(?body Content Layout))
    (TABLE (TR (TD (#GraphVizParse ?left) PORT: (send ?left  get-uuid))
               (TD (#GraphVizParse ?body) PORT: (send ?body  get-uuid))))
)
(defmethod #GraphVizParse 906 ((?self Layout) (?body Content Layout)(?right Sider))
    (TABLE (TR (TD (#GraphVizParse ?body ) PORT: (send ?body  get-uuid))
               (TD (#GraphVizParse ?right) PORT: (send ?right get-uuid))))
)

;;; 有Embed引用WireFrame的时候，WireFrame只解析到其main组件即可
(defmethod #GraphVizParse 1000 ((?self WireFrame)) (#GraphVizParse ?self (send ?self get-main)))
(defmethod #GraphVizParse 1001 ((?self WireFrame) ?main) (#GraphVizParse ?main))

(defmethod #GraphVizParse 1100 ((?self Image))
   ;(TEXT "&#x272D;")
    (bind ?text (if (eq nil (send ?self get-text)) then "&#x272B;" else (send ?self get-text)))
    (bind ?table (TABLE CELLBORDER: 0))
    (loop-for-count (?row (send ?self get-rows))
        (bind ?TR (TR))
        (loop-for-count (?col (send ?self get-columns))
            (slot-append$ ?TR 列 (TD (TEXT ?text)))
        )
        (slot-append$ ?table 行 ?TR)
    )
    (return ?table)
)
(defmethod #GraphVizParse 1200 ((?self Form))
    (bind ?table (TABLE))
    (loop-for-count (?i (length$ (send ?self get-left)))
        (bind ?left  (nth$ ?i (send ?self get-left )))
        (bind ?right (nth$ ?i (send ?self get-right)))
        (slot-append$ ?table 行 (TR (TD (#GraphVizParse ?left ) ALIGN: RIGHT)
                                    (TD (#GraphVizParse ?right) ALIGN: LEFT )))
    )
    (return ?table)
)
(defmethod #GraphVizParse 1300 ((?self Grid))
    (bind ?gutter (send ?self get-gutter ))
    (bind ?rows   (send ?self get-rows   ))
    (bind ?cols   (send ?self get-columns))
    (bind ?table  (TABLE CELLSPACING: ?gutter))
    (if (= 1 (length$ (send ?self get-children)));;; 只有一个child的时候，就成了repeat模式了
        then;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            (loop-for-count (?row ?rows) (bind ?TR (TR))
                (loop-for-count (?col ?cols)
                    (slot-append$ ?TR 列 (TD (#GraphVizParse (nth$ 1 (send ?self get-children)))))
                )
                (slot-append$ ?table 行 ?TR)
            )
        else;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            (loop-for-count (?row ?rows) (bind ?TR (TR))
                (loop-for-count (?col ?cols) (bind ?TD nil)
                    (do-for-instance ((?G @Grid))(and (eq ?self (send (send ?G get-annotation) get-owner))
                                                      ( = ?row        (send ?G get-row       ))
                                                      (>= ?col        (send ?G get-column    ))
                                                      (<  ?col  (+    (send ?G get-column    )(send ?G get-span))))
                        (if (= (+ ?col 1) (+ (send ?G get-column)(send ?G get-span)))
                            then (bind ?TD (TD (#GraphVizParse (send ?G get-annotation))
                                               COLSPAN: (send ?G get-span)
                                               PORT: (send (send ?G get-annotation) get-uuid)))
                            else (bind ?TD "")
                        )
                    )
                    (if (eq    nil ?TD) then (bind ?TD (TD (TEXT ""))))
                    (if (instancep ?TD) then (slot-append$ ?TR 列 ?TD))
                )
                (slot-append$ ?table 行 ?TR)
            )
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    )
    (return ?table)
)
(defmethod #GraphVizParse 1400 ((?self Breadcrumb))
    (bind ?multifield (create$))
    (progn$ (?v (send ?self get-children))
        (bind ?multifield (append$ ?multifield (send (#GraphVizParse ?v) graphviz)))
    )
    (return (TABLE (TR (TD (TEXT (join$ ?multifield " / "))))))
)
(defmethod #GraphVizParse 9000 ((?self useProperty))
    (TR (TD (TEXT (send ?self get-named  )) ALIGN: CENTER)
        (TD (TEXT (send ?self get-default)) ALIGN: CENTER))
)
(defmethod #GraphVizParse 9100 ((?self useState))
    (TR (TD (TEXT (send ?self get-getter )) ALIGN: CENTER)
        (TD (TEXT (send ?self get-setter )) ALIGN: CENTER)
        (TD (TEXT (send ?self get-default)) ALIGN: CENTER))
)

(defmethod #GraphVizParse 9200 ((?self useEffect))
    (bind ?table:effect (TABLE))
    (bind ?table:clear  (TABLE))
    (progn$ (?v (send ?self get-effect)) (slot-append$ ?table:effect 行 (TR (TD (TEXT ?v)))))
    (progn$ (?v (send ?self get-clear )) (slot-append$ ?table:clear  行 (TR (TD (TEXT ?v)))))

    (TR (TD ?table:effect ALIGN: CENTER)
        (TD ?table:clear  ALIGN: CENTER))
)

(defmethod #GraphVizParse 9300 ((?self useContext))
    (TR (TD (TEXT (send ?self get-context )) ALIGN: CENTER))
)

(defmethod #GraphVizParse 9400 ((?self useReducer))
    (TR (TD (TEXT (send ?self get-reducer)) ALIGN: CENTER)
        (TD (TEXT (send ?self get-state  )) ALIGN: CENTER)
        (TD (TEXT (send ?self get-prepare)) ALIGN: CENTER))
)

(defmethod #GraphVizParse 9500 ((?self useScript))
    (bind ?table (TABLE))
    (bind ?line 0)
    (do-for-instance ((?script @Script)) (eq (instance-name ?self)(send ?script get-annotation))
        (progn$ (?v (send ?script get-script)) (bind ?line (+ ?line 1))
            (slot-append$ ?table 行 (TR (TD (TEXT ?line) ALIGN: RIGHT)
                                        (TD (TEXT ?v   ) ALIGN: LEFT )))
        )
    )

   ;(return (TR (TD ?table)(TD (TEXT (if (send ?self get-global) then "&#x2611;" else "")))))
    (return (TR (TD ?table)(TD (TEXT (if (send ?self get-global) then "&#x2714;" else "")))))
)
