;;; vim:expandtab autoindent
;;; map <buffer> \\ :update<CR>:1tabnext<CR>:2wincmd w<CR>:silent normal \\<CR>:4tabnext<CR>

(defglobal ?*准备输出* = +900)
(defglobal ?*输出节点* = +800)
(defglobal ?*输出结果* = -980)
(defglobal ?*结束输出* = -990)
(defglobal ?*DOT* = UML.ERD.DOT)
(defglobal ?*PREFIX* = "Test")

(deffunction 列举实例 ()
    (do-for-all-instances ((?v Entity Relation Property)) (send ?v print))
)

(defclass DotEntity   (is-a USER)
    (     slot   实体 (type LEXEME))
    (     slot 是一种 (type INSTANCE)(allowed-classes DotEntity))
    (multislot 子实体 (type INSTANCE)(allowed-classes DotEntity))
    (multislot   属性 (type INSTANCE)(allowed-classes DotProperty))
    (multislot   关系 (type INSTANCE)(allowed-classes DotRelation))
    (multislot   绑定 (type INSTANCE)(allowed-classes DotBinding))
)
(defclass DotProperty (is-a USER)
    (slot 属性 (type LEXEME))
    (slot 类型 (type LEXEME))
)
(defclass DotRelation (is-a USER)
    (slot 实体 (type INSTANCE)(allowed-classes DotEntity))
    (slot 关系 (type LEXEME))
    (slot 目标 (type LEXEME))
    (slot 数量 (type SYMBOL)(allowed-symbols toOne toMany)(default toOne))
    (slot 关联 (type LEXEME)(allowed-symbols 组合 聚合)(default 组合))
    (slot 重载 (type INSTANCE)(allowed-classes DotRelation))
)
(defclass DotBinding (is-a DotProperty)
    (multislot 依赖 (type LEXEME))
)

(defmessage-handler DotEntity generate ()
    (send ?self print)
    (send ?self generate-table)
    (send ?self generate-relation)
    (send ?self generate-inheritance)
)
(defmessage-handler DotEntity generate-relation ()
    (progn$ (?v ?self:关系)
        (send ?v generate-relation)
    )
)
(defmessage-handler DotEntity generate-inheritance ()
    (progn$ (?v ?self:子实体)
        (bind ?style (str-cat arrowhead=empty,color=gray,style=dotted))
        (printout ?*DOT* (indent 1) (Q (send ?v get-实体))(S)->(S)(Q ?self:实体)(S)[ ?style ] crlf)
    )
)
(defmessage-handler DotEntity generate-table ()
    (bind ?super (switch ?self:是一种
                         (case    [nil] then "")
                         (default (send ?self:是一种 get-实体))))

    (bind ?table-subentity 
        (progn (bind ?X (create$))
               (progn$ (?v ?self:子实体)
                       (bind ?TEXT (make-instance of TEXT (文本 (send ?v get-实体))))
                       (bind ?TD   (make-instance of TD (内容 ?TEXT)))
                       (bind ?TR   (make-instance of TR (列   ?TD)))
                       (bind ?X    (append-if-not-exist$ ?X ?TR))
               )
               (make-instance of TABLE (行 ?X))
        )
    )
    (bind ?table-property
        (progn (bind ?X (create$))
               (progn$ (?v ?self:属性) (bind ?X (append-if-not-exist$ ?X (send ?v TR))))
               (make-instance of TABLE (行 ?X))
        )
    )
    (bind ?table-relation
        (progn (bind ?X (create$))
               (progn$ (?v ?self:关系) (bind ?X (append-if-not-exist$ ?X (send ?v TR))))
               (make-instance of TABLE (行 ?X))
        )
    )
    (bind ?table-binding
        (progn (bind ?X (create$))
               (progn$ (?v ?self:绑定) (bind ?X (append-if-not-exist$ ?X (send ?v TR))))
               (make-instance of TABLE (行 ?X))
        )
    )

    (bind ?table (make-instance of TABLE (行 
                    (make-instance of TR (列 (make-instance of TD (内容 (make-instance of TEXT (文本 ?self:实体)))(COLSPAN 2))))
    )))

    (if (neq [nil] ?self:是一种) then (modify-instance ?table (行 (send ?table get-行)
        (make-instance of TR (列 (make-instance of TD (内容 (make-instance of TEXT (文本  super))))
                                 (make-instance of TD (内容 (make-instance of TEXT (文本 ?super))))
        ))
    )))
    (if (not (empty$ ?self:子实体)) then (modify-instance ?table (行 (send ?table get-行)
        (make-instance of TR (列 (make-instance of TD (内容 (make-instance of TEXT (文本 sub))))
                                 (make-instance of TD (内容 ?table-subentity))
        ))
    )))
    (if (not (empty$ ?self:属性)) then (modify-instance ?table (行 (send ?table get-行)
        (make-instance of TR (列 (make-instance of TD (内容 (make-instance of TEXT (文本 property))))
                                 (make-instance of TD (内容 ?table-property))
        ))
    )))
    (if (not (empty$ ?self:关系)) then (modify-instance ?table (行 (send ?table get-行)
        (make-instance of TR (列 (make-instance of TD (内容 (make-instance of TEXT (文本 relation))))
                                 (make-instance of TD (内容 ?table-relation))
        ))
    )))
    (if (not (empty$ ?self:绑定)) then (modify-instance ?table (行 (send ?table get-行)
        (make-instance of TR (列 (make-instance of TD (内容 (make-instance of TEXT (文本 binding))))
                                 (make-instance of TD (内容 ?table-binding))
        ))
    )))
    (bind ?label (join$ (send ?table graphviz) ""))
    (printout ?*DOT* (indent 1) (Q ?self:实体)(S)[label=<<FONT(S)POINT-SIZE=(Q 8)> ?label </FONT>>] crlf)
)
(defmessage-handler DotProperty TR ()
    (send ?self print)
    (bind ?属性 (make-instance of TD (内容 (make-instance of TEXT (文本 ?self:属性)))))
    (bind ?类型 (make-instance of TD (内容 (make-instance of TEXT (文本 ?self:类型)))))
    (make-instance of TR (列 ?属性 ?类型))
)
(defmessage-handler DotBinding TR ()
    (send ?self print)
    (bind ?table (create$))
    (progn$ (?v ?self:依赖)
        (bind ?TD (make-instance of TD (内容 (make-instance of TEXT (文本 ?v)))))
        (bind ?TR (make-instance of TR (列 ?TD)))
        (bind ?table (append$ ?table ?TR))
    )
    (bind ?属性 (make-instance of TD (内容 (make-instance of TEXT  (文本 (send ?self get-属性))))))
    (bind ?类型 (make-instance of TD (内容 (make-instance of TEXT  (文本 (send ?self get-类型))))))
    (bind ?依赖 (make-instance of TD (内容 (make-instance of TABLE (行         ?table         )))))
    (make-instance of TR (列 ?属性 ?类型 ?依赖))
)

(defmessage-handler DotRelation generate ()
    (send ?self generate-override)
)
(defmessage-handler DotRelation TR ()
    (send ?self print)
    (bind ?关系 (make-instance of TD (内容 (make-instance of TEXT (文本 ?self:关系)))))
    (bind ?数量 (make-instance of TD (内容 (make-instance of TEXT (文本 ?self:数量)))))
    (bind ?目标 (make-instance of TD (内容 (make-instance of TEXT (文本 ?self:目标)))))
    (make-instance of TR (列 ?关系 ?数量 ?目标))
)
(defmessage-handler DotRelation 关系节点文本 ()
    (str-cat (send ?self:实体 get-实体) . ?self:关系 -> ?self:目标)
)
(defmessage-handler DotRelation generate-relation ()
    (bind ?源   (send ?self:实体 get-实体))
    (bind ?关系 ?self:关系)
    (bind ?目标 ?self:目标)
    (bind ?中介 (send ?self 关系节点文本))
    (bind ?箭头 (switch ?self:数量
                        (case toOne  then vee)
                        (case toMany then veevee)
                        (default normal)))
    (bind ?关联 (switch ?self:关联
                        (case 聚合 then odiamond)
                        (case 组合 then diamond)
                        (default normal)))
    (printout ?*DOT* (indent 1) { crlf)
    (printout ?*DOT* (indent 2)     (Q ?中介)(S)               [shape    = diamond ,    label=(Q ?关系),fontsize=8]                        crlf)
    (printout ?*DOT* (indent 2)     (Q ?源  )(S)->(S)(Q ?中介) [arrowtail=(I ?关联),arrowhead=(I ?箭头),dir=both,arrowsize=0.5]            crlf)
    (printout ?*DOT* (indent 2)     (Q ?中介)(S)->(S)(Q ?目标) [arrowtail=(I ?关联),arrowhead=(I ?箭头),dir=both,arrowsize=0.5,color=gray] crlf)
    (printout ?*DOT* (indent 1) } crlf)
)
(defmessage-handler DotRelation generate-override ()
    (send ?self print)
    (if (eq [nil] ?self:重载) then (return))
    (bind ?源   (send ?self      关系节点文本))
    (bind ?目标 (send ?self:重载 关系节点文本))
    (printout ?*DOT* (indent 1) (Q ?源)(S)->(Q ?目标)(S)[arrowhead=empty,color=gray,style=dashed] crlf)
)

(defrule 准备输出
    (declare (salience ?*准备输出*))
=>
    (open (str-cat ?*PREFIX* ".erd.dot") UML.ERD.DOT "w")
    (printout ?*DOT* "strict digraph {" crlf)
    (printout ?*DOT* "    node [shape=box]" crlf)
    (printout ?*DOT* "  //splines=ortho   " crlf)
    (printout ?*DOT* "    rankdir=LR      " crlf)
)
(defrule 输出结果-DotEntity
    (declare (salience ?*输出结果*))
    (object (is-a DotEntity)(name ?dot))
=>
    (send ?dot generate)
)
(defrule 输出结果-DotRelation
    (declare (salience ?*输出结果*))
    (object (is-a DotRelation)(name ?dot))
=>
    (send ?dot generate)
)
(defrule 结束输出
    (declare (salience ?*结束输出*))
=>
    (printout ?*DOT* "}" crlf)
)
(defrule 准备DotEntity数据-Create
    (object (is-a Entity)(实体 ?实体))
=>
    (make-instance of DotEntity (实体 ?实体))
)
(defrule 准备DotEntity数据-IsA
    (object (is-a DotEntity)(实体 ?实体)(name ?dot))
    (object (is-a    Entity)(实体 ?实体)(是一种 ?super&~nil))
    (object (is-a    Entity)(实体 ?super))
    (object (is-a DotEntity)(实体 ?super)(name ?is-a))
=>
    (send ?is-a print)
    (modify-instance ?dot (是一种 ?is-a))
)
(defrule 准备DotEntity数据-SubEntity
    (object (is-a DotEntity)(实体   ?实体)(name ?dot))
    (object (is-a    Entity)(实体   ?实体))
    (object (is-a    Entity)(实体 ?子实体)(是一种 ?实体))
    (object (is-a DotEntity)(实体 ?子实体)(name ?sub))
=>
    (modify-instance ?dot (子实体 (append$ (send ?dot get-子实体) ?sub)))
)
(defrule 准备DotEntity数据-Property
    (object (is-a         DotEntity)(实体 ?实体)(name ?dot))
    (object (is-a            Entity)(实体 ?实体))
    (object (is-a Property&~Binding)(实体 ?实体)(属性 ?属性)(类型 ?类型))
=>
    (bind ?property (make-instance of DotProperty (属性 ?属性)(类型 ?类型)))
    (modify-instance ?dot (属性 (append$ (send ?dot get-属性) ?property)))
)
(defrule 准备DotEntity数据-Binding
    (object (is-a DotEntity)(实体 ?实体)(name ?dot))
    (object (is-a Entity)   (实体 ?实体))
    (object (is-a Binding)  (实体 ?实体)(属性 ?属性)(类型 ?类型)(依赖 $?依赖))
=>
    (bind ?binding (make-instance of DotBinding (属性 ?属性)(类型 ?类型)(依赖 $?依赖)))
    (modify-instance ?dot (绑定 (append$ (send ?dot get-绑定) ?binding)))
)
(defrule 准备DotEntity数据-Relation-Create
    (object (is-a DotEntity)(实体 ?实体)(name ?dot))
    (object (is-a Entity)   (实体 ?实体))
    (object (is-a Relation) (实体 ?实体)(关系 ?关系)(目标 ?目标)(数量 ?数量)(关联 ?关联))
=>
    (bind ?relation (make-instance of DotRelation (实体 ?dot)(关系 ?关系)(目标 ?目标)(数量 ?数量)(关联 ?关联)))
    (modify-instance ?dot (关系 (append$ (send ?dot get-关系) ?relation)))
)
(defrule 准备DotEntity数据-Relation-Override
    ;;; 源
    (object (is-a DotEntity  )(name ?A)(实体 ?实体))
    (object (is-a    Relation)         (实体 ?实体)(关系 ?关系)(重载 ?B ?C))
    (object (is-a DotEntity  )(name ?D)(实体 ?实体))
    (object (is-a DotRelation)(name ?E)(实体 ?D   )(关系 ?关系))
    ;;; 目标
    (object (is-a DotEntity  )(name ?F)(实体 ?B   ))
    (object (is-a DotRelation)(name ?G)(实体 ?F   )(关系 ?C   ))
=>
    (modify-instance ?E (重载 ?G))
    (send ?E print)
)
;(defrule 输出【Entity】数据
;    (declare (salience ?*输出节点*))
;    (object (is-a Entity)(实体 ?实体)(是一种 ?super))
;=>
;    (bind ?sub-entities (create$))
;    (do-for-all-instances ((?O Entity)) (eq ?O:是一种 ?实体)
;        (bind ?sub-entities (append-if-not-exist$ ?sub-entities ?O:实体))
;    )
;    (bind ?properties (create$))
;    (do-for-all-instances ((?O Property))(and (eq ?O:实体 ?实体)(eq Property (class ?O)))
;        (bind ?TD:标识 (str-cat <TD                                   > P       </TD>))
;        (bind ?TD:属性 (str-cat <TD                                   > ?O:属性 </TD>))
;        (bind ?TD:类型 (if (neq nil ?O:默认) 
;                  then (str-cat <TD" "COLSPAN="\"1\" "ALIGN="\"LEFT\""> ?O:类型 </TD>)
;                  else (str-cat <TD" "COLSPAN="\"3\" "ALIGN="\"LEFT\""> ?O:类型 </TD>)))
;        (bind ?TD:默认 (if (neq nil ?O:默认) then (str-cat <TD" "COLSPAN="\"2\""> ?O:默认 </TD>) else ""))
;        (bind ?enums (create$))
;        (progn$ (?v ?O:枚举)
;                (bind ?enums (append-if-not-exist$ ?enums (if (eq ?v ?O:默认) then (str-cat <TR><TD" "BGCOLOR="\"gray90\""> ?v </TD></TR>)
;                                                                              else (str-cat <TR><TD                       > ?v </TD></TR>))))
;        )
;        (bind ?TD:枚举 (if (not (empty$ ?O:枚举)) 
;                            then (str-cat <TD" "COLSPAN="\"2\"">
;                                            <TABLE" "BORDER="\"0\" "CELLBORDER="\"1\" "CELLSPACING="\"0\" "CELLPADDING="\"1\" "COLOR="\"gray\"">
;                                                  (join$ ?enums "")
;                                            </TABLE>
;                                          </TD>)
;                            else ""))
;        (bind ?properties (append$ ?properties (str-cat <TR> ?TD:标识 ?TD:属性 ?TD:类型 (if (not (empty$ ?enums)) then ?TD:枚举 else ?TD:默认) </TR>)))
;    )
;    (bind ?bindings (create$))
;    (do-for-all-instances ((?O Binding))(and (eq ?O:实体 ?实体)(eq Binding (class ?O)))
;        (bind ?依赖 (create$))
;        (progn$ (?x ?O:依赖)
;            (bind ?依赖 (append-if-not-exist$ ?依赖 (str-cat <TR><TD" "ALIGN="\"LEFT\""> ?x </TD></TR>)))
;        )
;        (bind ?TD:标识 (str-cat <TD> B                       </TD>))
;        (bind ?TD:属性 (str-cat <TD> ?O:属性                 </TD>))
;        (bind ?TD:类型 (str-cat <TD> ?O:类型                 </TD>))
;        (bind ?TD:依赖 (if (> (length$ ?依赖) 0) 
;                            then (str-cat <TD" "COLSPAN="\"2\"">
;                                            <TABLE" "BORDER="\"0\" "CELLBORDER="\"1\" "CELLSPACING="\"0\" "CELLPADDING="\"1\" "COLOR="\"gray\"">
;                                                (join$ ?依赖 "") 
;                                            </TABLE>
;                                          </TD>)
;                            else (str-cat <TD" "COLSPAN="\"2\""></TD>)))
;        (bind ?bindings (append$ ?bindings (str-cat <TR> ?TD:标识 ?TD:属性 ?TD:类型 ?TD:依赖 </TR>)))
;    )
;    (bind ?relations (create$))
;    (do-for-all-instances ((?O Relation))(eq ?O:实体 ?实体)
;        (bind ?TD:标识 (str-cat <TD                   > R       </TD>))
;        (bind ?TD:关系 (str-cat <TD                   > ?O:关系 </TD>))
;        (bind ?TD:目标 (str-cat <TD" "ALIGN="\"LEFT\""> ?O:目标 </TD>))
;        (bind ?TD:数量 (str-cat <TD                   > ?O:数量 </TD>))
;        (bind ?relations (append$ ?relations (str-cat <TR> ?TD:标识 ?TD:关系 ?TD:数量 ?TD:目标 
;                                                          <TD>
;                                                              <TABLE" "BORDER="\"0\" "CELLBORDER="\"1\" "CELLSPACING="\"0\" "CELLPADDING="\"1\" "COLOR="\"gray\"">
;                                                                  (if (and (eq ?O:反向 nil)(eq ?O:重载 nil)) then (str-cat <TR><TD></TD></TR>))
;                                                                  (if (neq ?O:反向 nil) then (str-cat <TR><TD>I</TD><TD" "COLSPAN="\"1\""> ?O:反向 </TD></TR>))
;                                                                  (if (neq ?O:重载 nil) then (str-cat <TR><TD>O</TD><TD" "COLSPAN="\"1\""> ?O:重载 </TD></TR>))
;                                                              </TABLE>
;                                                          </TD>  
;                                                      </TR>)))
;    )
;    (bind ?label (str-cat label=< <FONT" "POINT-SIZE="\"8\""><TABLE" "BORDER="\"0\" "CELLBORDER="\"1\" "CELLSPACING="\"0\" "CELLPADDING="\"2\" "COLOR="\"gray\"">
;        <TR><TD" "COLSPAN="\"5\""><FONT" "POINT-SIZE="\"14\""> ?实体 </FONT></TD></TR> 
;        (if (neq ?super nil) then 
;            (str-cat <TR><TD" "COLSPAN="\"1\""> is-a </TD> <TD" "COLSPAN="\"4\""> ?super </TD></TR>)
;        )
;        (if (not (empty$ ?sub-entities)) then
;            (str-cat <TR><TD>sub</TD>
;                         <TD" "COLSPAN="\"4\"">
;                            <TABLE" "BORDER="\"0\" "CELLBORDER="\"1\" "CELLSPACING="\"0\" "CELLPADDING="\"2\" "COLOR="\"gray\"">
;                                <TR><TD> (join$ ?sub-entities "</TD></TR><TR><TD>") </TD></TR>
;                            </TABLE>
;                         </TD>
;                     </TR>)
;        )
;        (if (not (empty$ ?properties)) then
;            (str-cat;<TR><TD" "COLSPAN="\"5\" "BGCOLOR="\"gray90\""></TD></TR> 
;                     (join$ ?properties "")
;            )
;        )
;        (if (not (empty$ ?relations)) then
;            (str-cat;<TR><TD" "COLSPAN="\"5\" "BGCOLOR="\"gray90\""></TD></TR> 
;                     (join$ ?relations "")
;            )
;        )
;        (if (not (empty$ ?bindings)) then
;            (str-cat;<TR><TD" "COLSPAN="\"5\" "BGCOLOR="\"gray90\""></TD></TR> 
;                     (join$ ?bindings "")
;            )
;        )
;    </TABLE></FONT>>))
;    (bind ?n-style (str-cat ?label ,shape=box))
;    (printout ?*DOT* (indent 1) "\"" ?实体 "\"" [ ?n-style ] crlf)
;)
;(defrule 输出【Inherit】数据
;    (object (is-a Entity)(实体 ?实体)(是一种 ?super&~nil))
;=>
;    (bind ?e-style "arrowhead=empty,color=gray,style=dotted")
;    (printout ?*DOT* (indent 1) "\"" ?实体 "\"" -> "\"" ?super "\"" [ ?e-style ] crlf)
;)
;(defrule 输出【Relation】数据
;    (object (is-a Relation)(实体 ?实体)(关系 ?关系)(目标 ?目标)(数量 ?数量)(关联 ?关联)(反向 ?反向))
;=>
;    (bind ?arrowtail (if (eq ?关联   组合) then "arrowtail=diamond" else "arrowtail=odiamond"))
;    (bind ?arrowhead (if (eq ?数量 toMany) then "arrowhead=veevee"  else "arrowhead=vee"))
;    (bind ?taillabel (str-cat "taillabel=\"" ?关系 "\""))
;    (bind ?e-style (str-cat ?arrowtail , ?arrowhead , dir=both , arrowsize=0.5))
;    (bind ?中间节点 (str-cat "\"" ?实体 . ?关系 -> ?目标 "\""))
;    (printout ?*DOT* (indent 1) { crlf)
;    (printout ?*DOT* (indent 2) ?中间节点 [ shape=diamond, label= "\"" ?关系 "\"", fontsize=8] crlf)
;    (printout ?*DOT* (indent 2) "\"" ?实体 "\"" -> ?中间节点 [ ?e-style ] crlf)
;    (printout ?*DOT* (indent 2) ?中间节点 -> "\"" ?目标 "\"" [ ?e-style , color=gray] crlf)
;    (printout ?*DOT* (indent 1) } crlf)
;)
;(defrule 输出【Override】数据
;    (object (is-a Relation)(name ?A)(重载 ?重载&~nil))
;    (object (is-a Relation)(name ?B)(实体 ?实体)(关系 ?关系))
;    (test (eq (sym-cat ?实体 . ?关系) ?重载))
;=>
;    (bind ?实现的中间节点 (str-cat "\"" (send ?A get-实体) . (send ?A get-关系) -> (send ?A get-目标) "\""))
;    (bind ?接口的中间节点 (str-cat "\"" (send ?B get-实体) . (send ?B get-关系) -> (send ?B get-目标) "\""))
;    (bind ?e-style "arrowhead=empty,color=gray,style=dashed")
;    (printout ?*DOT* (indent 1) { crlf)
;    (printout ?*DOT* (indent 2) ?实现的中间节点 -> ?接口的中间节点 [ ?e-style ] crlf)
;    (printout ?*DOT* (indent 1) } crlf)
;)
