;;; vim:expandtab autoindent

(defclass Intermediate#Encode (is-a USER)
    (slot 代码   (type LEXEME))
    (slot 表达式 (type INSTANCE)(allowed-classes Expression))
)
(defclass Intermediate#Machine (is-a USER)
    (     slot 名称     (type LEXEME))
    (     slot 类       (type LEXEME))
    (     slot 初始状态 (type INSTANCE)(allowed-classes Intermediate#State))
    (multislot 初始动作 (type INSTANCE)(allowed-classes Intermediate#Encode))
    (multislot 销毁动作 (type INSTANCE)(allowed-classes Intermediate#Encode))
)
(defclass Intermediate#State (is-a USER)
    (     slot 状态机   (type INSTANCE)(allowed-classes Intermediate#Machine))
    (     slot 名称     (type LEXEME))
    (     slot 类       (type LEXEME))
    (multislot 进入动作 (type INSTANCE)(allowed-classes Intermediate#Encode))
    (multislot 离开动作 (type INSTANCE)(allowed-classes Intermediate#Encode))
)
(defclass Intermediate#Trigger (is-a USER)
    (     slot 状态机   (type INSTANCE)(allowed-classes Intermediate#Machine))
    (     slot 名称     (type INSTANCE)(allowed-classes Intermediate#Encode))
    (multislot 前置脚本 (type INSTANCE)(allowed-classes Intermediate#Encode))
    (multislot 后置脚本 (type INSTANCE)(allowed-classes Intermediate#Encode))
)
(defclass Intermediate#Guard (is-a USER)
    (     slot 状态机 (type INSTANCE)(allowed-classes Intermediate#Machine))
    (     slot 名称   (type INSTANCE)(allowed-classes Intermediate#Encode))
    (multislot 脚本   (type INSTANCE)(allowed-classes Intermediate#Encode))
)
(defclass Intermediate#Action (is-a USER)
    (     slot 状态机 (type INSTANCE)(allowed-classes Intermediate#Machine))
    (     slot 名称   (type INSTANCE)(allowed-classes Intermediate#Encode))
    (multislot 脚本   (type INSTANCE)(allowed-classes Intermediate#Encode))
)
(defclass Intermediate#Transition (is-a USER)
    (slot 状态机    (type INSTANCE)(allowed-classes Intermediate#Machine))
    (slot 源状态    (type INSTANCE)(allowed-classes Intermediate#State))
    (slot 目标状态  (type INSTANCE)(allowed-classes Intermediate#State))
    (slot 触发器    (type LEXEME))
    (multislot 守卫 (type INSTANCE)(allowed-classes Intermediate#Encode))
    (multislot 动作 (type INSTANCE)(allowed-classes Intermediate#Encode))
)
(defclass Intermediate#Variable (is-a USER)
    (slot 父        (type INSTANCE)(allowed-classes Intermediate#Machine Intermediate#State))
    (slot 名称      (type LEXEME))
    (slot 类型      (type LEXEME))
    (slot 注解      (type LEXEME))
    (slot 默认      (type LEXEME))
    (multislot 枚举 (type LEXEME))
)
(defclass Intermediate#Callback (is-a USER)
    (slot 父        (type INSTANCE)(allowed-classes Intermediate#Machine Intermediate#State))
    (slot 名称      (type LEXEME))
    (multislot 参数 (type INSTANCE)(allowed-classes Intermediate#Encode))
)
(defclass Intermediate#SubMachine (is-a USER)
    (slot 父        (type INSTANCE)(allowed-classes Intermediate#Machine Intermediate#State))
    (slot 名称      (type LEXEME))
    (slot 原型      (type INSTANCE)(allowed-classes Intermediate#Machine))
    (multislot 脚本 (type INSTANCE)(allowed-classes Intermediate#Encode))
)
(defclass Intermediate#Aspect (is-a USER)
    (slot 状态机    (type INSTANCE)(allowed-classes Intermediate#Machine))
    (slot 切面      (type INSTANCE)(allowed-classes Intermediate#Machine))
    (multislot 脚本 (type LEXEME))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Intermediate#Encode
(defmethod Intermediate#Encode ((?script LEXEME))
    (make-instance of Intermediate#Encode
        (代码                    ?script )
        (表达式 (make-expression ?script))
    )
)
(defmethod Intermediate#Encode ((?scripts MULTIFIELD))
    (bind ?multifield (create$))
    (progn$ (?script ?scripts)
        (bind ?multifield (append$ ?multifield (Intermediate#Encode ?script)))
    )
    (return ?multifield)
)
(defmessage-handler Intermediate#Encode 领域表示 ()
    (return (str-cat (expr-normalized ?self:代码)))
)
;;; Intermediate#Machine
(defmessage-handler Intermediate#Machine 状态列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#State))
        (eq (send ?v get-状态机)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#Machine 转换列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#Transition))
        (eq (send ?v get-状态机)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#Machine 变量列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#Variable))
        (eq (send ?v get-父)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#Machine 回调列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#Callback))
        (eq (send ?v get-父)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#Machine 子状态机列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#SubMachine))
        (eq (send ?v get-父)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#Machine 触发器列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#Trigger))
        (eq (send ?v get-状态机)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#Machine 守卫列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#Guard))
        (eq (send ?v get-状态机)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#Machine 动作列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#Action))
        (eq (send ?v get-状态机)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
;;; Intermediate#State
(defmessage-handler Intermediate#State 转换列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#Transition))
        (and (eq (send ?v get-状态机)(instance-name ?self:状态机))
             (eq (send ?v get-源状态)(instance-name ?self       )))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#State 变量列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#Variable))
        (eq (send ?v get-父)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#State 回调列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#Callback))
        (eq (send ?v get-父)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
(defmessage-handler Intermediate#State 子状态机列表 ()
    (bind ?list (create$))
    (do-for-all-instances ((?v Intermediate#SubMachine))
        (eq (send ?v get-父)(instance-name ?self))
        (bind ?list (append$ ?list ?v))
    )
    (return ?list)
)
