;;; vim:expandtab autoindent
;;; map <buffer> \\ :update<CR>:1tabnext<CR>:2wincmd w<CR>:silent normal \\<CR>:5tabnext<CR>

(defglobal ?*准备输出* = +900)
(defglobal ?*生成代码* = -800)
(defglobal ?*结束输出* = -900)
(defglobal ?*UML* = UML.FSM.JAVA)
(defglobal ?*PREFIX* = "Test")

(defrule 准备输出
    (declare (salience ?*准备输出*))
=>
    (open (clips_cwd ?*PREFIX* ".fsm.java") UML.FSM.JAVA "w")
)

(defrule 生成代码【JavaMachine】
    (declare (salience ?*生成代码*))
    (object (is-a Intermediate#Machine)(name ?machine))
=>
    (printout ?*UML* (indent 0) (join$ (send ?machine classForMachine) (N)(indent 0)) crlf)
    (printout ?*UML* (indent 0) crlf)
)

(defrule 结束输出
    (declare (salience ?*结束输出*))
=>
    (close ?*UML*)
)

(defmessage-handler Intermediate#Machine extendsForMachine ()
    (if (neq nil ?self:类) 
        then (str-cat (S)extends(S)(I ?self:类))
        else ""
    )
)
(defmessage-handler Intermediate#Machine classForMachine ()
    (bind ?java (create$))
    (bind ?java (append-cat$ ?java      (indent  0) class(S)?self:名称(send ?self extendsForMachine)(S){))
    ;;; interface for State
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 6)(S)interface(S)for(S)State(S)(repeat * 7)*/))
    (bind ?java (append$     ?java      (indent$ 1      (send ?self interfaceForState))))
    (bind ?java (append$     ?java      (indent$ 1      (send ?self initializeForMachine))))
    (bind ?java (append$     ?java      (indent$ 1      (send ?self terminateForMachine))))
    ;;; currentState
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 10)(S)currentState(S)(repeat * 10)*/))
    (if (neq [nil] ?self:初始状态) then
        (bind ?初始状态 (send ?self:初始状态 get-名称))
        (bind ?java (append-cat$ ?java  (indent  1)     private(S)State(S)currentState(S)=(S)new(S)?初始状态"();"))
    )
    ;;; triggers
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 12)(S)triggers(S)(repeat * 12)*/))
    (progn$ (?触发器 (send ?self 触发器列表))
        (bind ?触发器名称 (send (send ?触发器 get-名称) 领域表示))
        (bind ?java (append-cat$ ?java  (indent  1)     public(S)void(S)(I ?触发器名称){))
        (bind ?java (append-cat$ ?java  (indent  2)         this.currentState.machine=this";"))
        (bind ?java (append$     ?java  (indent$ 2          (send ?触发器 前置实现脚本))))
        (bind ?java (append-cat$ ?java  (indent  2)         this.currentState.(I ?触发器名称)";"))
        (bind ?java (append$     ?java  (indent$ 2          (send ?触发器 后置实现脚本))))
        (bind ?java (append-cat$ ?java  (indent  1)     }))
    )
    ;;; actions
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 12)(S)actions(S)(repeat * 13)*/))
    (progn$ (?动作 (send ?self 动作列表))
        (bind ?动作名称 (send (send ?动作 get-名称) 领域表示))
        (bind ?java (append-cat$ ?java  (indent  1)     public(S)void(S)?动作名称(S) {))
        (bind ?java (append-cat$ ?java  (indent  2)         (I ?self:名称)(S)"self = this;"))
        (bind ?java (append$     ?java  (indent$ 2          (send ?动作 动作实现脚本))))
        (bind ?java (append-cat$ ?java  (indent  1)     }))
    )
    ;;; guards
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 12)(S)guards (S)(repeat * 14)*/))
    (progn$ (?守卫 (send ?self 守卫列表))
        (bind ?守卫名称 (send (send ?守卫 get-名称) 领域表示))
        (bind ?java (append-cat$ ?java  (indent  1)     public(S)boolean(S)?守卫名称(S) {))
        (bind ?java (append-cat$ ?java  (indent  2)         (I ?self:名称)(S)"self = this;"))
        (bind ?java (append-cat$ ?java  (indent  2)         return(S)(join$ (send ?守卫 守卫实现脚本) "&&") ";"))
        (bind ?java (append-cat$ ?java  (indent  1)     }))
    )
    ;;; submachines
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 10)(S)submachines(S)(repeat * 11)*/))
    (progn$ (?子状态机 (send ?self 子状态机列表))
        (bind ?java (append$ ?java      (indent$ 1      (send ?子状态机 definitionForSubMachine))))
    )
    ;;; variables
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 11)(S)variables(S)(repeat * 12)*/))
    (progn$ (?变量 (send ?self 变量列表))
        (bind ?java (append$ ?java      (indent$ 1      (send ?变量 definitionForVariable))))
    )
    ;;; states
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 13)(S)states(S)(repeat * 13)*/))
    (progn$ (?状态 (send ?self 状态列表))
        (bind ?java (append$ ?java      (indent$ 1      (send ?状态 classForState))))
    )

    (bind ?java (append-cat$ ?java      (indent  0) }))
    (return ?java)
)
(defmessage-handler Intermediate#Machine interfaceForState ()
    (bind ?java (create$))
    (bind ?java (append-cat$     ?java (indent  0) public(S)abstract(S)class(S)State(S){))
    (bind ?java (append-cat$     ?java (indent  1)     (I ?self:名称)(S)machine(S)=(S)null";"))
    (bind ?java (append-cat$     ?java (indent  1)     void(S)onEnter"(){}"))
    (bind ?java (append-cat$     ?java (indent  1)     void(S)onLeave"(){}"))
    (progn$ (?v (send ?self 触发器列表))
        (bind ?触发器名称 (send (send ?v get-名称) 领域表示))
        (bind ?java (append-cat$ ?java (indent  1)     void(S)(I ?触发器名称)"{}"))
    )
    (bind ?java (append-cat$     ?java (indent  0) }))
    (return ?java)
)
(defmessage-handler Intermediate#Machine initializeForMachine ()
    (bind ?java (create$))
    (bind ?java (append-cat$     ?java (indent  0) public(S)void(S)initialize(S)(L)(R)(S){))
    (bind ?java (append-cat$     ?java (indent  1)      (I ?self:名称)(S)"self = this;"))
    (progn$ (?子状态机 (send ?self 子状态机列表))
        (bind ?子状态机名称 (send (send ?子状态机 get-名称) 领域表示 ?self:名称 SubMachine))
        (bind ?java (append$     ?java (indent$ 1       (send ?子状态机 submachineInitializeScripts))))
        (bind ?java (append-cat$ ?java (indent  1)      self.(I ?子状态机名称).initialize"();"))
    )
    (bind ?java (append-cat$     ?java (indent  0) }))
    (return ?java)
)
(defmessage-handler Intermediate#Machine terminateForMachine ()
    (bind ?java (create$))
    (bind ?java (append-cat$     ?java (indent  0) public(S)void(S)terminate(S)(L)(R)(S){))
    (bind ?java (append-cat$     ?java (indent  1)      (I ?self:名称)(S)"self = this;"))
    (progn$ (?子状态机 (send ?self 子状态机列表))
        (bind ?子状态机名称 (send (send ?子状态机 get-名称) 领域表示 ?self:名称 SubMachine))
        (bind ?java (append-cat$ ?java (indent  1)     self.(I ?子状态机名称).terminate"();"))
    )
    (bind ?java (append-cat$     ?java (indent  0) }))
    (return ?java)
)
(defmessage-handler Intermediate#State extendsForState ()
    (if (neq nil ?self:类) 
        then (str-cat (S)extends(S)(I ?self:类))
        else (str-cat (S)extends(S)State)
    )
)
(defmessage-handler Intermediate#State classForState ()
    (bind ?java (create$))
    (bind ?java (append-cat$ ?java      (indent  0) private(S)class(S)?self:名称(send ?self extendsForState)(S){))
    (bind ?java (append$     ?java      (indent$ 1      (send ?self transitionByTriggers))))
    (bind ?java (append-cat$ ?java      (indent  1)     public(S)void(S)onEnter"()"{))
    (bind ?java (append-cat$ ?java      (indent  2)         (send ?self:状态机 get-名称)(S)"self = this.machine;"))
    (bind ?java (append$     ?java      (indent$ 2          (send ?self onEnterActions))))
    (bind ?java (append-cat$ ?java      (indent  1)     }))
    (bind ?java (append-cat$ ?java      (indent  1)     public(S)void(S)onLeave"()"{))
    (bind ?java (append-cat$ ?java      (indent  2)         (send ?self:状态机 get-名称)(S)"self = this.machine;"))
    (bind ?java (append$     ?java      (indent$ 2          (send ?self onLeaveActions))))
    (bind ?java (append-cat$ ?java      (indent  1)     }))
    ;;; submachines
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 10)(S)submachines(S)(repeat * 11)*/))
    (progn$ (?子状态机 (send ?self 子状态机列表))
        (bind ?java (append$ ?java      (indent$ 1      (send ?子状态机 definitionForSubMachine))))
    )
    ;;; variables
    (bind ?java (append-cat$ ?java      (indent  1)     /*(repeat * 11)(S)variables(S)(repeat * 12)*/))
    (progn$ (?变量 (send ?self 变量列表))
        (bind ?java (append$ ?java      (indent$ 1      (send ?变量 definitionForVariable))))
    )
    (bind ?java (append-cat$     ?java  (indent  0) }))
    (return ?java)
)
(defmessage-handler Intermediate#State onEnterActions ()
    (bind ?java (create$))
    (progn$ (?动作 ?self:进入动作)
        (bind ?java (append-cat$ ?java (indent 0) (send ?动作 领域表示) ";"))
    )
    (return ?java)
)
(defmessage-handler Intermediate#State onLeaveActions ()
    (bind ?java (create$))
    (progn$ (?动作 ?self:离开动作)
        (bind ?java (append-cat$ ?java (indent 0) (send ?动作 领域表示) ";"))
    )
    (return ?java)
)
(defmessage-handler Intermediate#State transitionByTriggers ()
    (bind ?java (create$))
    (progn$ (?触发器 (send ?self:状态机 触发器列表))
        (progn$ (?转换 (send ?self 转换列表))
            (if (eq (send ?转换 get-触发器)(send ?触发器 get-名称)) then
                (bind ?目标状态 (send ?转换 get-目标状态))
                (bind ?java (append-cat$ ?java (indent  0) public(S)void(S)(send ?触发器 get-名称)(L)(send ?self:状态机 get-名称)(S)machine(R) {))
                (bind ?java (append-cat$ ?java (indent  1)      if(S)(L)(join$ (send ?转换 执行守卫检查) "&&")(R) {))
                (bind ?java (append-cat$ ?java (indent  2)           this.machine.currentState.onLeave"();"))
                (bind ?java (append$     ?java (indent$ 2            (send ?转换 执行转换动作))))
                (bind ?java (append-cat$ ?java (indent  2)           this.machine.currentState=new(S)(send ?目标状态 get-名称) "();"))
                (bind ?java (append-cat$ ?java (indent  2)           this.machine.currentState.onEnter"();"))
                (bind ?java (append-cat$ ?java (indent  1)      }))
                (bind ?java (append-cat$ ?java (indent  0) }))
            )
        )
    )
    (return ?java)
)
(defmessage-handler Intermediate#Trigger 前置实现脚本 ()
    (bind ?java (create$))
    (progn$ (?script ?self:前置脚本)
        (bind ?java (append-cat$ ?java (indent 0) (send ?script 领域表示) ";"))
    )
    (return ?java)
)
(defmessage-handler Intermediate#Trigger 后置实现脚本 ()
    (bind ?java (create$))
    (progn$ (?script ?self:后置脚本)
        (bind ?java (append-cat$ ?java (indent 0) (send ?script 领域表示) ";"))
    )
    (return ?java)
)
(defmessage-handler Intermediate#Guard 守卫实现脚本 ()
    (bind ?java (create$))
    (progn$ (?script ?self:脚本)
        (bind ?java (append-cat$ ?java (indent 0) (send ?script 领域表示)))
    )
    (return ?java)
)
(defmessage-handler Intermediate#Action 动作实现脚本 ()
    (bind ?java (create$))
    (progn$ (?script ?self:脚本)
        (bind ?java (append-cat$ ?java (indent 0) (send ?script 领域表示) ";"))
    )
    (return ?java)
)
(defmessage-handler Intermediate#Transition 执行守卫检查 ()
    (bind ?java (create$))
    (if (empty$ ?self:守卫)
        then                            (bind ?java (append-cat$ ?java (indent 0) true))
        else (progn$ (?守卫 ?self:守卫) (bind ?java (append-cat$ ?java (indent 0) machine.(I ?守卫) "()")))
    )
    (return ?java)
)
(defmessage-handler Intermediate#Transition 执行转换动作 ()
    (bind ?java (create$))
    (progn$ (?动作 ?self:动作)
        (bind ?java (append-cat$ ?java (indent 0) machine.(I ?动作) "();"))
    )
    (return ?java)
)

(defmessage-handler Intermediate#SubMachine submachineInitializeScripts ()
    (bind ?java (create$))
    (bind ?名称 ?self:名称)
    (progn$ (?脚本  ?self:脚本)
        (bind ?java (append-cat$ ?java (indent 0) /*(S)(I ?名称)(S)*/(S)(send ?脚本 领域表示) ";"))
    )
    (return ?java)
)
(defmessage-handler Intermediate#SubMachine definitionForSubMachine ()
    (bind ?java (create$))
    (bind ?原型 (send ?self:原型 get-名称))
    (bind ?名称 (send ?self:名称 领域表示 (send ?self:父 get-名称) SubMachine))
    (bind ?java (append-cat$ ?java  (indent  0) ?原型(S)?名称(S)=(S)new(S)?原型"();"))
    (return ?java)
)
(defmessage-handler Intermediate#Variable definitionForVariable ()
    (bind ?java (create$))
    (bind ?默认值 (if (str-not-equal "" ?self:默认) then (str-cat (S)=(S)(I ?self:默认)) else ""))
    (bind ?java (append-cat$ ?java (indent  0) ?self:类型(S)?self:名称(S)(I ?默认值)";"))
    (return ?java)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmessage-handler Intermediate#Encode 领域表示 ()
   ;(return (str-cat (expr-normalized ?self:代码)))
   (send ?self:表达式 expression)
)
(defmessage-handler SYMBOL 领域表示 (?状态机 ?类别)
   ;(println "领域表示：" ?状态机(S)?类别(S)?self)
    (do-for-instance ((?v Translation)) (and (str-equal (send ?v get-状态机) ?状态机)
                                             (str-equal (send ?v get-类别  ) ?类别  )
                                             (str-equal (send ?v get-名称  ) ?self  ))
        (return (send ?v get-翻译))
    )
    (return ?self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Expression 领域定义
(defmessage-handler Expression#FSM#Define expression ()
    (bind ?member    (send ?self:member    expression))
    (bind ?arguments (send ?self:arguments expression))
    (if (str-not-equal "" ?arguments) then 
        (bind ?arguments (str-cat _ ?arguments))
    )
    (str-cat (I ?member)(I ?arguments)(L)(R))
)
(defmessage-handler Expression#FSM#Invoke expression ()
    (bind ?keypath   (send ?self:keypath   expression))
    (bind ?member    (send ?self:member    expression))
    (bind ?arguments (send ?self:arguments expression))
    (if (str-not-equal "" ?arguments) then 
        (bind ?arguments (str-cat _ ?arguments))
    )
    (str-cat (I ?keypath).(I ?member)(I ?arguments)(L)(R))
)
(defmessage-handler Expression#FSM#State expression ()
    (str-cat ' ?self:state ')
)
(defmessage-handler Expression#FSM#IsCurrentState expression ()
    (str-cat self.currentState(S)instanceof(S)?self:state)
)
(defmessage-handler Expression#FSM#SetCurrentState expression ()
    (str-cat self.currentState(S)=(S)new(S)?self:state(L)(R))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmessage-handler Expression#Comment expression ()
    (str-cat /*(S)(send ?self:comment expression)(S)*/)
)
(defmessage-handler Expression#KeyPath expression ()
    (bind ?path ?self:path)
    (if (str-not-equal self (nth$ 1 ?path)) then (bind ?path (create$ self ?path)))
    (sym-cat (join$ (explode$ (send ?path expression)) "."))
)
(defmessage-handler Expression#Assign expression ()
    (str-cat (send ?self:left expression) ?self:symbol (send ?self:right expression))
)
(defmessage-handler Expression#Compare expression ()
    (str-cat (send ?self:left expression) ?self:symbol (send ?self:right expression))
)
(defmessage-handler Expression#Logic expression ()
    (bind ?symbol (switch ?self:symbol
        (case not then (str-cat                              "!" (send ?self:right expression)))
        (case and then (str-cat (send ?self:left expression) "&&" (send ?self:right expression)))
        (case or  then (str-cat (send ?self:left expression) "||" (send ?self:right expression)))
        (default (call-next-handler))
    ))
)

